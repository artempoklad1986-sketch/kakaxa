<?php
// ============================================================================
// üöÄ FUNCTIONS.PHP v3.0 - –ú–ï–ì–ê –í–ï–†–°–ò–Ø –° –ò–ò –ò–ù–¢–ï–ì–†–ê–¶–ò–ï–ô (–ò–°–ü–†–ê–í–õ–ï–ù–û)
// –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ò–ò –º–æ–¥—É–ª—è –≤ —Å–∏—Å—Ç–µ–º—É
// ============================================================================

error_reporting(E_ALL);
ini_set('display_errors', 1);

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –ò–ò –º–æ–¥—É–ª—å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
$aiModulePath = $_SERVER['DOCUMENT_ROOT'] . '/admin/modules/ai_assistant/aqua_ai.php';
if (!file_exists($aiModulePath)) {
    // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –ò–ò
    class AquaAI {
        public function __construct() {}

        public function handleAjaxRequest($action, $data) {
            return ['success' => false, 'message' => '–ò–ò –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'];
        }

        public function generateProductName($category, $keywords = []) {
            return '–ê–≤—Ç–æ—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞';
        }

        public function generateProductDescription($name, $category, $existing_data = []) {
            return [
                'description' => '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞. –û—Ç–ª–∏—á–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞—è —Ü–µ–Ω–∞.',
                'short_description' => '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞'
            ];
        }

        public function suggestOptimalPrice($name, $category, $market_data = []) {
            return [
                'price' => 500,
                'old_price' => 700,
                'explanation' => '–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
                'confidence' => 0.5
            ];
        }

        public function generateSEOData($name, $description, $category) {
            return [
                'meta_title' => $name . ' - –∫—É–ø–∏—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ',
                'meta_description' => substr($description, 0, 160),
                'tags' => '–∞–∫–≤–∞—Ä–∏—É–º, —Ç–æ–≤–∞—Ä—ã, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ',
                'seo_score' => 70,
                'recommendations' => []
            ];
        }

        public function analyzeProduct($productData) {
            return [
                'completeness' => 80,
                'quality_score' => 75,
                'market_potential' => 85,
                'seo_optimization' => 70,
                'recommendations' => []
            ];
        }

        public function improveProduct($productData) {
            return [];
        }

        public function learnFromUserAction($action, $data, $success = true) {
            return true;
        }

        public function getAIStats() {
            return [
                'total_generations' => 0,
                'successful_generations' => 0,
                'learning_entries' => 0,
                'knowledge_base_size' => 126,
                'last_learning' => 0
            ];
        }

        public function exportLearningData() {
            return ['message' => '–ò–ò –º–æ–¥—É–ª—å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω'];
        }

        public function importLearningData($data) {
            return false;
        }

        public function analyzeOverallPerformance($products, $orders, $reviews) {
            return [
                'efficiency_score' => 0,
                'accuracy_score' => 0,
                'quality_score' => 0,
                'learning_speed' => 0,
                'recommendation_accuracy' => 0,
                'overall_rating' => 0
            ];
        }

        public function sortByRelevance($products, $search) {
            return $products;
        }

        public function getProductRecommendations($product) {
            return [];
        }

        public function findRelatedProducts($product) {
            return [];
        }

        public function calculateSEOScore($title, $description, $tags) {
            return 70;
        }

        public function selectFeaturedProducts($products, $limit) {
            return array_slice($products, 0, $limit);
        }

        public function getCategoryInsights($categoryId) {
            return [];
        }

        public function analyzeCategoryPerformance($categoryId, $count, $totalValue) {
            return [];
        }

        public function getCategoryRecommendations($categoryId) {
            return [];
        }

        public function getCartRecommendations($items) {
            return [];
        }

        public function findSimilarProducts($item) {
            return [];
        }

        public function analyzeSentiment($comment) {
            return 'neutral';
        }

        public function extractReviewKeywords($comment) {
            return [];
        }

        public function analyzeRatingTrend($reviews) {
            return 'stable';
        }

        public function analyzeProductRating($productId, $average, $validRatings) {
            return [];
        }

        public function analyzeReviewBeforeSave($reviewData) {
            return [
                'sentiment' => 'neutral',
                'spam_score' => 0.1,
                'quality_score' => 0.8
            ];
        }

        public function analyzeOrder($order) {
            return [];
        }

        public function getOrderRecommendations($order) {
            return [];
        }

        public function generateDashboardInsights($stats, $products, $orders) {
            return [];
        }

        public function getDashboardRecommendations($stats) {
            return [
                [
                    'title' => '–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ò–ò –º–æ–¥—É–ª—å',
                    'description' => '–î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –º–æ–¥—É–ª—å –ò–ò',
                    'icon' => 'fas fa-robot',
                    'priority' => '–í—ã—Å–æ–∫–∏–π',
                    'type' => 'important'
                ]
            ];
        }

        public function analyzeTrends($orders, $products) {
            return [
                [
                    'title' => '–û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏',
                    'description' => '–°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç',
                    'trend' => 'up',
                    'change' => 5,
                    'forecast' => '–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π'
                ]
            ];
        }
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    error_log('–í–ù–ò–ú–ê–ù–ò–ï: –ò–ò –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: ' . $aiModulePath . '. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞.');
} else {
    require_once $aiModulePath;
}

/**
 * –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ò–ò
 */
$GLOBALS['aqua_ai'] = null;

function getAquaAI() {
    if ($GLOBALS['aqua_ai'] === null) {
        $GLOBALS['aqua_ai'] = new AquaAI();
    }
    return $GLOBALS['aqua_ai'];
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏
 */
function initSession() {
    if (session_status() === PHP_SESSION_NONE) {
        ini_set('session.cookie_lifetime', 86400);
        ini_set('session.gc_maxlifetime', 86400);
        ini_set('session.cookie_httponly', 1);
        ini_set('session.cookie_samesite', 'Lax');

        if (!session_start()) {
            error_log('–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é');
            return false;
        }
        error_log('–°–µ—Å—Å–∏—è –∑–∞–ø—É—â–µ–Ω–∞: ' . session_id());
    }
    return true;
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞
 */
function loadJsonData($filename) {
    $filepath = __DIR__ . '/data/' . $filename;
    if (!file_exists($filepath)) {
        error_log("JSON —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $filepath");
        return [];
    }
    $content = file_get_contents($filepath);
    $data = json_decode($content, true);
    if (json_last_error() !== JSON_ERROR_NONE) {
        error_log("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ $filename: " . json_last_error_msg());
        return [];
    }
    return $data ?: [];
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª
 */
function saveJsonData($filename, $data) {
    $filepath = __DIR__ . '/data/' . $filename;
    $dir = dirname($filepath);
    if (!is_dir($dir)) {
        if (!mkdir($dir, 0755, true)) {
            error_log("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: $dir");
            return false;
        }
    }
    $json = json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE);
    if ($json === false) {
        error_log("–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –¥–ª—è $filename: " . json_last_error_msg());
        return false;
    }
    $result = file_put_contents($filepath, $json, LOCK_EX);
    return $result !== false;
}

// ========== –ò–ò –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –¢–û–í–ê–†–û–í ==========

function getProducts($filters = []) {
    $products = loadJsonData('products.json');

    if (!empty($filters['category_id'])) {
        $products = array_filter($products, function($product) use ($filters) {
            return isset($product['category_id']) && $product['category_id'] == $filters['category_id'];
        });
    }

    if (!empty($filters['search'])) {
        $search = mb_strtolower($filters['search']);
        $products = array_filter($products, function($product) use ($search) {
            $name = mb_strtolower($product['name'] ?? '');
            $desc = mb_strtolower($product['description'] ?? '');
            $tags = mb_strtolower($product['tags'] ?? '');
            return mb_strpos($name, $search) !== false || 
                   mb_strpos($desc, $search) !== false ||
                   mb_strpos($tags, $search) !== false;
        });
    }

    if (!empty($filters['price_min'])) {
        $products = array_filter($products, function($product) use ($filters) {
            return isset($product['price']) && $product['price'] >= $filters['price_min'];
        });
    }

    if (!empty($filters['price_max'])) {
        $products = array_filter($products, function($product) use ($filters) {
            return isset($product['price']) && $product['price'] <= $filters['price_max'];
        });
    }

    if (!isset($filters['include_inactive'])) {
        $products = array_filter($products, function($product) {
            return !isset($product['status']) || $product['status'] == 1;
        });
    }

    // –ò–ò —É–ª—É—á—à–µ–Ω–∏–µ: —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ
    if (!empty($filters['search'])) {
        $ai = getAquaAI();
        $products = $ai->sortByRelevance($products, $filters['search']);
    }

    return array_values($products);
}

function getAllProducts() {
    return loadJsonData('products.json');
}

function getProductById($id) {
    if (empty($id)) return null;
    $products = loadJsonData('products.json');
    foreach ($products as $product) {
        if (isset($product['id']) && $product['id'] == $id) {
            // –ò–ò —É–ª—É—á—à–µ–Ω–∏–µ: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞
            return enrichProductWithAI($product);
        }
    }
    return null;
}

/**
 * –ò–ò —Ñ—É–Ω–∫—Ü–∏—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞
 */
function enrichProductWithAI($product) {
    $ai = getAquaAI();

    // –î–æ–±–∞–≤–ª—è–µ–º –ò–ò —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    $product['ai_recommendations'] = $ai->getProductRecommendations($product);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    $product['related_products'] = $ai->findRelatedProducts($product);

    // –î–æ–±–∞–≤–ª—è–µ–º SEO —Ä–µ–π—Ç–∏–Ω–≥
    $product['seo_score'] = $ai->calculateSEOScore(
        $product['meta_title'] ?? $product['name'] ?? '',
        $product['meta_description'] ?? '',
        explode(',', $product['tags'] ?? '')
    );

    return $product;
}

function getFeaturedProducts($limit = 8) {
    $products = getProducts();
    if (empty($products)) return [];

    // –ò–ò —É–ª—É—á—à–µ–Ω–∏–µ: —É–º–Ω—ã–π –≤—ã–±–æ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    $ai = getAquaAI();
    $featured = $ai->selectFeaturedProducts($products, $limit);

    return $featured;
}

function saveProduct($productData) {
    try {
        // –ò–ò —É–ª—É—á—à–µ–Ω–∏–µ: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        $ai = getAquaAI();

        if (empty($productData['ai_generated'])) {
            // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ —Å–æ–∑–¥–∞–Ω –ò–ò, —É–ª—É—á—à–∞–µ–º –µ–≥–æ
            $improvements = $ai->improveProduct($productData);

            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
            foreach ($improvements as $field => $value) {
                if (empty($productData[$field]) && !empty($value)) {
                    $productData[$field] = $value;
                }
            }
        }

        $products = loadJsonData('products.json');

        if (empty($productData['id'])) {
            $productData['id'] = 'prod_' . time() . '_' . uniqid();
            $productData['created_at'] = date('Y-m-d H:i:s');
        }

        $productData['updated_at'] = date('Y-m-d H:i:s');

        $productExists = false;
        foreach ($products as $key => $product) {
            if ($product['id'] == $productData['id']) {
                $products[$key] = $productData;
                $productExists = true;
                break;
            }
        }

        if (!$productExists) {
            $products[] = $productData;
        }

        if (saveJsonData('products.json', $products)) {
            // –ò–ò –æ–±—É—á–µ–Ω–∏–µ: —É—á–∏–º—Å—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ
            $ai->learnFromUserAction('product_created', $productData, true);

            return ['success' => true, 'product_id' => $productData['id']];
        } else {
            return ['success' => false, 'error' => '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª'];
        }

    } catch (Exception $e) {
        error_log('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: ' . $e->getMessage());
        return ['success' => false, 'error' => $e->getMessage()];
    }
}

function deleteProduct($id) {
    try {
        $products = loadJsonData('products.json');
        $deletedProduct = null;

        $products = array_filter($products, function($product) use ($id, &$deletedProduct) {
            if ($product['id'] == $id) {
                $deletedProduct = $product;
                return false;
            }
            return true;
        });

        $result = saveJsonData('products.json', array_values($products));

        if ($result && $deletedProduct) {
            // –ò–ò –æ–±—É—á–µ–Ω–∏–µ: —É—á–∏–º—Å—è –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
            $ai = getAquaAI();
            $ai->learnFromUserAction('product_deleted', $deletedProduct, true);
        }

        return $result;
    } catch (Exception $e) {
        return false;
    }
}

// ========== –ò–ò –§–£–ù–ö–¶–ò–ò –î–õ–Ø AJAX –ó–ê–ü–†–û–°–û–í ==========

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ò–ò –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
 */
function handleProductAIRequest($action, $data) {
    $ai = getAquaAI();
    return $ai->handleAjaxRequest($action, $data);
}

/**
 * –ò–ò –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
 */
function aiGenerateProductName($category, $keywords = []) {
    $ai = getAquaAI();
    return $ai->generateProductName($category, $keywords);
}

/**
 * –ò–ò –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
 */
function aiGenerateProductDescription($name, $category, $existingData = []) {
    $ai = getAquaAI();
    return $ai->generateProductDescription($name, $category, $existingData);
}

/**
 * –ò–ò –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã
 */
function aiSuggestProductPrice($name, $category, $marketData = []) {
    $ai = getAquaAI();
    return $ai->suggestOptimalPrice($name, $category, $marketData);
}

/**
 * –ò–ò –≥–µ–Ω–µ—Ä–∞—Ü–∏—è SEO –¥–∞–Ω–Ω—ã—Ö
 */
function aiGenerateSEOData($name, $description, $category) {
    $ai = getAquaAI();
    return $ai->generateSEOData($name, $description, $category);
}

/**
 * –ò–ò –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞
 */
function aiAnalyzeProduct($productData) {
    $ai = getAquaAI();
    return $ai->analyzeProduct($productData);
}

/**
 * –ò–ò —É–ª—É—á—à–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
 */
function aiImproveProduct($productData) {
    $ai = getAquaAI();
    return $ai->improveProduct($productData);
}

// ========== –ö–ê–¢–ï–ì–û–†–ò–ò –° –ò–ò –£–õ–£–ß–®–ï–ù–ò–Ø–ú–ò ==========

function getCategories() {
    $categories = loadJsonData('categories.json');

    // –ò–ò —É–ª—É—á—à–µ–Ω–∏–µ: –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    $ai = getAquaAI();
    foreach ($categories as &$category) {
        $category['ai_insights'] = $ai->getCategoryInsights($category['id']);
    }

    return $categories;
}

function getCategoriesWithCount() {
    $categories = loadJsonData('categories.json');
    $products = getProducts();

    foreach ($categories as &$category) {
        $count = 0;
        $totalValue = 0;

        foreach ($products as $product) {
            if (isset($product['category_id']) && $product['category_id'] == $category['id']) {
                $count++;
                $totalValue += $product['price'] ?? 0;
            }
        }

        $category['products_count'] = $count;
        $category['total_value'] = $totalValue;
        $category['avg_price'] = $count > 0 ? round($totalValue / $count) : 0;

        // –ò–ò –∞–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        $ai = getAquaAI();
        $category['ai_analysis'] = $ai->analyzeCategoryPerformance($category['id'], $count, $totalValue);
    }

    return $categories;
}

function getCategoryById($id) {
    if (!is_numeric($id) || $id <= 0) return null;
    $categories = loadJsonData('categories.json');
    foreach ($categories as $category) {
        if (isset($category['id']) && $category['id'] == $id) {
            // –ò–ò –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            $ai = getAquaAI();
            $category['ai_recommendations'] = $ai->getCategoryRecommendations($id);
            return $category;
        }
    }
    return null;
}

// ========== –ö–û–†–ó–ò–ù–ê –° –ò–ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø–ú–ò ==========

function initCart() {
    if (!initSession()) {
        return false;
    }

    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
        error_log('–ö–û–†–ó–ò–ù–ê: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–æ—Ä–∑–∏–Ω–∞');
    }

    return true;
}

function addToCart($productId, $quantity = 1) {
    error_log("–ö–û–†–ó–ò–ù–ê: –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä ID=$productId, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ=$quantity");

    if (!initCart()) {
        error_log('–ö–û–†–ó–ò–ù–ê: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
        return false;
    }

    if (empty($productId) || !is_numeric($quantity) || $quantity <= 0) {
        error_log("–ö–û–†–ó–ò–ù–ê: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - productId: $productId, quantity: $quantity");
        return false;
    }

    $productId = strval($productId);
    $quantity = (int)$quantity;

    $product = getProductById($productId);
    if (!$product) {
        error_log("–ö–û–†–ó–ò–ù–ê: –¢–æ–≤–∞—Ä —Å ID $productId –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return false;
    }

    if (isset($_SESSION['cart'][$productId])) {
        $_SESSION['cart'][$productId] += $quantity;
        error_log("–ö–û–†–ó–ò–ù–ê: –£–≤–µ–ª–∏—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ $productId –¥–æ " . $_SESSION['cart'][$productId]);
    } else {
        $_SESSION['cart'][$productId] = $quantity;
        error_log("–ö–û–†–ó–ò–ù–ê: –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä $productId –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ $quantity");
    }

    // –ò–ò –æ–±—É—á–µ–Ω–∏–µ: –∞–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω–µ
    $ai = getAquaAI();
    $ai->learnFromUserAction('cart_add', [
        'product_id' => $productId,
        'quantity' => $quantity,
        'product_data' => $product
    ], true);

    error_log('–ö–û–†–ó–ò–ù–ê: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - ' . json_encode($_SESSION['cart']));
    return true;
}

function getCartItems() {
    if (!initCart()) {
        return ['items' => [], 'total' => 0, 'count' => 0];
    }

    $cart = $_SESSION['cart'] ?? [];
    $items = [];
    $total = 0;

    foreach ($cart as $productId => $quantity) {
        $product = getProductById($productId);
        if ($product && is_numeric($quantity) && $quantity > 0) {
            $item = $product;
            $item['quantity'] = (int)$quantity;
            $item['subtotal'] = (float)$product['price'] * (int)$quantity;
            $total += $item['subtotal'];
            $items[] = $item;
        }
    }

    // –ò–ò —É–ª—É—á—à–µ–Ω–∏–µ: –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫ –∫–æ—Ä–∑–∏–Ω–µ
    $ai = getAquaAI();
    $recommendations = $ai->getCartRecommendations($items);

    return [
        'items' => $items,
        'total' => $total,
        'count' => count($items),
        'ai_recommendations' => $recommendations
    ];
}

function getCartTotal() {
    $cartData = getCartItems();
    return $cartData['total'];
}

function getCartCount() {
    if (!initCart()) {
        return 0;
    }

    $cart = $_SESSION['cart'] ?? [];
    $count = array_sum($cart);
    error_log("–ö–û–†–ó–ò–ù–ê: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ - $count");
    return $count;
}

function updateCartItem($productId, $quantity) {
    if (!initCart()) {
        return false;
    }

    $productId = strval($productId);
    $quantity = (int)$quantity;

    if ($quantity > 0) {
        $_SESSION['cart'][$productId] = $quantity;
        error_log("–ö–û–†–ó–ò–ù–ê: –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ $productId –¥–æ $quantity");
    } else {
        unset($_SESSION['cart'][$productId]);
        error_log("–ö–û–†–ó–ò–ù–ê: –£–¥–∞–ª–µ–Ω —Ç–æ–≤–∞—Ä $productId");
    }

    return true;
}

function removeFromCart($productId) {
    if (!initCart()) {
        return false;
    }

    $productId = strval($productId);

    if (isset($_SESSION['cart'][$productId])) {
        unset($_SESSION['cart'][$productId]);
        error_log("–ö–û–†–ó–ò–ù–ê: –£–¥–∞–ª–µ–Ω —Ç–æ–≤–∞—Ä $productId");
        return true;
    }

    return false;
}

function clearCart() {
    if (!initCart()) {
        return false;
    }
    $_SESSION['cart'] = [];
    error_log('–ö–û–†–ó–ò–ù–ê: –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞');
    return true;
}

// ========== –ò–ó–ë–†–ê–ù–ù–û–ï –° –ò–ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø–ú–ò ==========

function initFavorites() {
    if (!initSession()) {
        return false;
    }

    if (!isset($_SESSION['favorites'])) {
        $_SESSION['favorites'] = [];
        error_log('–ò–ó–ë–†–ê–ù–ù–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤–æ–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ');
    }

    return true;
}

function getFavorites() {
    if (!initFavorites()) return [];
    return $_SESSION['favorites'] ?? [];
}

function getFavoritesItems() {
    if (!initFavorites()) {
        return [];
    }

    $favorites = $_SESSION['favorites'] ?? [];
    $items = [];

    foreach ($favorites as $productId) {
        $product = getProductById($productId);
        if ($product) {
            $items[] = $product;
        }
    }

    // –ò–ò —É–ª—É—á—à–µ–Ω–∏–µ: –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    if (!empty($items)) {
        $ai = getAquaAI();
        foreach ($items as &$item) {
            $item['ai_similar'] = $ai->findSimilarProducts($item);
        }
    }

    return $items;
}

function addToFavorites($productId) {
    if (!initFavorites()) return false;

    $productId = strval($productId);

    $product = getProductById($productId);
    if (!$product) {
        error_log("–ò–ó–ë–†–ê–ù–ù–û–ï: –¢–æ–≤–∞—Ä —Å ID $productId –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return false;
    }

    if (!in_array($productId, $_SESSION['favorites'])) {
        $_SESSION['favorites'][] = $productId;
        error_log("–ò–ó–ë–†–ê–ù–ù–û–ï: –î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä $productId");

        // –ò–ò –æ–±—É—á–µ–Ω–∏–µ: –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $ai = getAquaAI();
        $ai->learnFromUserAction('favorites_add', [
            'product_id' => $productId,
            'product_data' => $product
        ], true);

        return true;
    }

    return false;
}

function removeFromFavorites($productId) {
    if (!initFavorites()) return false;

    $productId = strval($productId);
    $key = array_search($productId, $_SESSION['favorites']);

    if ($key !== false) {
        unset($_SESSION['favorites'][$key]);
        $_SESSION['favorites'] = array_values($_SESSION['favorites']);
        error_log("–ò–ó–ë–†–ê–ù–ù–û–ï: –£–¥–∞–ª–µ–Ω —Ç–æ–≤–∞—Ä $productId");
        return true;
    }

    return false;
}

function getFavoritesCount() {
    if (!initFavorites()) return 0;
    $count = count($_SESSION['favorites'] ?? []);
    error_log("–ò–ó–ë–†–ê–ù–ù–û–ï: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ - $count");
    return $count;
}

function isInFavorites($productId) {
    if (!initFavorites()) return false;
    return in_array(strval($productId), $_SESSION['favorites'] ?? []);
}

function clearFavorites() {
    if (!initFavorites()) return false;
    $_SESSION['favorites'] = [];
    error_log('–ò–ó–ë–†–ê–ù–ù–û–ï: –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –æ—á–∏—â–µ–Ω–æ');
    return true;
}

// ========== –û–¢–ó–´–í–´ –° –ò–ò –ê–ù–ê–õ–ò–ó–û–ú ==========

function getAllReviews() {
    return loadJsonData('reviews.json');
}

function getReviewById($id) {
    $reviews = getAllReviews();
    foreach ($reviews as $review) {
        if ($review['id'] === $id) {
            return $review;
        }
    }
    return null;
}

function getProductReviews($productId) {
    $reviews = loadJsonData('reviews.json');
    $productReviews = array_filter($reviews, function($review) use ($productId) {
        return isset($review['product_id']) && $review['product_id'] == $productId &&
               isset($review['status']) && $review['status'] === 'approved';
    });

    // –ò–ò —É–ª—É—á—à–µ–Ω–∏–µ: –∞–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    $ai = getAquaAI();
    $reviewsArray = array_values($productReviews);

    foreach ($reviewsArray as &$review) {
        $review['ai_sentiment'] = $ai->analyzeSentiment($review['comment']);
        $review['ai_keywords'] = $ai->extractReviewKeywords($review['comment']);
    }

    return $reviewsArray;
}

function getProductRating($productId) {
    $reviews = getProductReviews($productId);
    if (empty($reviews)) {
        return ['average' => 0, 'count' => 0];
    }

    $ratings = array_column($reviews, 'rating');
    $validRatings = array_filter($ratings, function($rating) {
        return is_numeric($rating) && $rating > 0 && $rating <= 5;
    });

    if (empty($validRatings)) {
        return ['average' => 0, 'count' => 0];
    }

    $average = array_sum($validRatings) / count($validRatings);

    // –ò–ò —É–ª—É—á—à–µ–Ω–∏–µ: –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ —Ä–µ–π—Ç–∏–Ω–≥–∞
    $ai = getAquaAI();
    $trend = $ai->analyzeRatingTrend($reviews);

    return [
        'average' => round($average, 1),
        'count' => count($validRatings),
        'trend' => $trend,
        'ai_analysis' => $ai->analyzeProductRating($productId, $average, $validRatings)
    ];
}

function saveReview($reviewData) {
    try {
        if (empty($reviewData['product_id']) || empty($reviewData['customer_name']) ||
            empty($reviewData['comment']) || !isset($reviewData['rating'])) {
            return ['success' => false, 'message' => '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è'];
        }

        if (!is_numeric($reviewData['rating']) || $reviewData['rating'] < 1 || $reviewData['rating'] > 5) {
            return ['success' => false, 'message' => '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥'];
        }

        $product = getProductById($reviewData['product_id']);
        if (!$product) {
            return ['success' => false, 'message' => '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'];
        }

        // –ò–ò –∞–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        $ai = getAquaAI();
        $aiAnalysis = $ai->analyzeReviewBeforeSave($reviewData);

        // –î–æ–±–∞–≤–ª—è–µ–º –ò–ò –¥–∞–Ω–Ω—ã–µ –∫ –æ—Ç–∑—ã–≤—É
        $reviewData['ai_sentiment'] = $aiAnalysis['sentiment'];
        $reviewData['ai_spam_score'] = $aiAnalysis['spam_score'];
        $reviewData['ai_quality_score'] = $aiAnalysis['quality_score'];

        $reviews = getAllReviews();

        if (empty($reviewData['id'])) {
            $reviewData['id'] = generateUniqueId();
            $reviewData['created_at'] = date('Y-m-d H:i:s');
        }

        $reviewData['updated_at'] = date('Y-m-d H:i:s');

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ò–ò –∞–Ω–∞–ª–∏–∑–∞
        if (!isset($reviewData['status'])) {
            if ($aiAnalysis['quality_score'] > 0.7 && $aiAnalysis['spam_score'] < 0.3) {
                $reviewData['status'] = 'approved';
            } else {
                $reviewData['status'] = 'pending';
            }
        }

        $exists = false;
        foreach ($reviews as $key => $review) {
            if ($review['id'] === $reviewData['id']) {
                $reviews[$key] = $reviewData;
                $exists = true;
                break;
            }
        }

        if (!$exists) {
            $reviews[] = $reviewData;
        }

        if (saveJsonData('reviews.json', $reviews)) {
            // –ò–ò –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –æ—Ç–∑—ã–≤–∞—Ö
            $ai->learnFromUserAction('review_created', $reviewData, true);

            return ['success' => true, 'message' => '–û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ'];
        } else {
            return ['success' => false, 'message' => '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞'];
        }
    } catch (Exception $e) {
        error_log('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞: ' . $e->getMessage());
        return ['success' => false, 'message' => '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'];
    }
}

// ========== –ó–ê–ö–ê–ó–´ –° –ò–ò –ê–ù–ê–õ–ò–¢–ò–ö–û–ô ==========

function saveOrder($orderData) {
    $orders = loadJsonData('orders.json');

    $order = [
        'id' => time() . '_' . uniqid(),
        'date' => date('Y-m-d H:i:s'),
        'status' => 'new',
        'customer' => $orderData['customer'] ?? [],
        'items' => $orderData['items'] ?? [],
        'total' => $orderData['total'] ?? 0
    ];

    // –ò–ò –∞–Ω–∞–ª–∏–∑ –∑–∞–∫–∞–∑–∞
    $ai = getAquaAI();
    $order['ai_analysis'] = $ai->analyzeOrder($order);
    $order['ai_recommendations'] = $ai->getOrderRecommendations($order);

    $orders[] = $order;

    if (saveJsonData('orders.json', $orders)) {
        // –ò–ò –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –∑–∞–∫–∞–∑–∞—Ö
        $ai->learnFromUserAction('order_created', $order, true);
        return $order['id'];
    }
    return false;
}

function getOrders() {
    return loadJsonData('orders.json');
}

function updateOrderStatus($id, $status) {
    $orders = loadJsonData('orders.json');
    foreach ($orders as &$order) {
        if ($order['id'] == $id) {
            $order['status'] = $status;
            $order['updated_at'] = date('Y-m-d H:i:s');

            $result = saveJsonData('orders.json', $orders);

            if ($result) {
                // –ò–ò –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞
                $ai = getAquaAI();
                $ai->learnFromUserAction('order_status_changed', [
                    'order_id' => $id,
                    'new_status' => $status,
                    'order_data' => $order
                ], true);
            }

            return $result;
        }
    }
    return false;
}

// ========== –ò–ò –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê ==========

function getDashboardStats() {
    $products = getAllProducts();
    $orders = getOrders();
    $categories = getCategories();
    $reviews = getAllReviews();

    $activeProducts = array_filter($products, function($p) {
        return !isset($p['status']) || $p['status'] == 1;
    });

    // –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    $stats = [
        'total_products' => count($activeProducts),
        'total_categories' => count($categories),
        'total_orders' => count($orders),
        'total_reviews' => count($reviews),
        'today_orders' => 0,
        'month_orders' => 0,
        'total_revenue' => 0,
        'month_revenue' => 0
    ];

    // –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–æ–≤ –∏ –∑–∞–∫–∞–∑–æ–≤
    $today = date('Y-m-d');
    $monthStart = date('Y-m-01');

    foreach ($orders as $order) {
        $orderDate = date('Y-m-d', strtotime($order['date']));
        $orderMonth = date('Y-m', strtotime($order['date']));

        if ($orderDate === $today) {
            $stats['today_orders']++;
        }

        if ($orderMonth === date('Y-m')) {
            $stats['month_orders']++;
            $stats['month_revenue'] += $order['total'] ?? 0;
        }

        $stats['total_revenue'] += $order['total'] ?? 0;
    }

    // –ò–ò —É–ª—É—á—à–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    $ai = getAquaAI();
    $stats['ai_insights'] = $ai->generateDashboardInsights($stats, $products, $orders);
    $stats['ai_recommendations'] = $ai->getDashboardRecommendations($stats);
    $stats['ai_trends'] = $ai->analyzeTrends($orders, $products);

    return $stats;
}

// ========== –ò–ò –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–ò ==========

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ò–ò –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
 */
function getAIAdminStats() {
    $ai = getAquaAI();
    return $ai->getAIStats();
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è –ò–ò
 */
function exportAILearningData() {
    $ai = getAquaAI();
    return $ai->exportLearningData();
}

/**
 * –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è –ò–ò
 */
function importAILearningData($data) {
    $ai = getAquaAI();
    return $ai->importLearningData($data);
}

/**
 * –ò–ò –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞
 */
function getAIPerformanceAnalysis() {
    $ai = getAquaAI();

    $products = getAllProducts();
    $orders = getOrders();
    $reviews = getAllReviews();

    return $ai->analyzeOverallPerformance($products, $orders, $reviews);
}

// ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========

function formatPrice($price) {
    if (!is_numeric($price)) return '0 ‚ÇΩ';
    return number_format((float)$price, 0, ',', ' ') . ' ‚ÇΩ';
}

function getSiteSettings() {
    return loadJsonData('settings.json');
}

function saveSiteSettings($settingsData) {
    return saveJsonData('settings.json', $settingsData);
}

function generateUniqueId() {
    return 'item_' . time() . '_' . uniqid();
}

function updateReviewStatus($id, $status) {
    if (!in_array($status, ['pending', 'approved', 'rejected'])) {
        return false;
    }

    $reviews = getAllReviews();
    foreach ($reviews as &$review) {
        if ($review['id'] === $id) {
            $review['status'] = $status;
            $review['updated_at'] = date('Y-m-d H:i:s');
            return saveJsonData('reviews.json', $reviews);
        }
    }
    return false;
}

function deleteReview($id) {
    $reviews = getAllReviews();
    $reviews = array_filter($reviews, function($review) use ($id) {
        return $review['id'] !== $id;
    });
    return saveJsonData('reviews.json', array_values($reviews));
}

function getProductLabels($productId) {
    $rating = getProductRating($productId);
    $labels = [];

    if ($rating['count'] > 0) {
        if ($rating['average'] >= 4.5 && $rating['count'] >= 5) {
            $labels[] = ['text' => '–ü–†–ï–ú–ò–£–ú', 'class' => 'bg-gradient-danger'];
        } elseif ($rating['average'] >= 4.0 && $rating['count'] >= 3) {
            $labels[] = ['text' => '–•–û–†–û–®–ò–ô –¢–û–í–ê–†', 'class' => 'bg-gradient-success'];
        } elseif ($rating['count'] >= 10) {
            $labels[] = ['text' => '–ü–û–ü–£–õ–Ø–†–ù–´–ô', 'class' => 'bg-gradient-info'];
        }
    }

    $product = getProductById($productId);
    if ($product && isset($product['is_new']) && $product['is_new']) {
        $labels[] = ['text' => '–ù–û–í–ò–ù–ö–ê', 'class' => 'bg-gradient-warning'];
    }

    if ($product && isset($product['is_sale']) && $product['is_sale']) {
        $labels[] = ['text' => '–ê–ö–¶–ò–Ø', 'class' => 'bg-gradient-danger'];
    }

    return $labels;
}

function initializeDefaultData() {
    $categories = getCategories();
    if (empty($categories)) {
        $defaultCategories = [
            ['id' => 1, 'name' => '–†–∞—Å—Ç–µ–Ω–∏—è', 'slug' => 'plants', 'description' => '–ê–∫–≤–∞—Ä–∏—É–º–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è', 'created_at' => date('Y-m-d H:i:s')],
            ['id' => 2, 'name' => '–†—ã–±–∫–∏', 'slug' => 'fish', 'description' => '–ê–∫–≤–∞—Ä–∏—É–º–Ω—ã–µ —Ä—ã–±–∫–∏', 'created_at' => date('Y-m-d H:i:s')],
            ['id' => 3, 'name' => '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', 'slug' => 'equipment', 'description' => '–ê–∫–≤–∞—Ä–∏—É–º–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', 'created_at' => date('Y-m-d H:i:s')],
            ['id' => 4, 'name' => '–î–µ–∫–æ—Ä', 'slug' => 'decoration', 'description' => '–î–µ–∫–æ—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞', 'created_at' => date('Y-m-d H:i:s')]
        ];
        saveJsonData('categories.json', $defaultCategories);
    }

    $settings = getSiteSettings();
    if (empty($settings)) {
        $defaultSettings = [
            'site_name' => '–ê–∫–≤–∞–°–±–æ—Ä',
            'site_description' => '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω –∞–∫–≤–∞—Ä–∏—É–º–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–æ–º',
            'contact_email' => 'info@akvasbor.ru',
            'contact_phone' => '+7 (000) 000-00-00',
            'currency' => 'RUB',
            'ai_enabled' => true,
            'ai_learning' => true,
            'updated_at' => date('Y-m-d H:i:s')
        ];
        saveSiteSettings($defaultSettings);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò –¥–∞–Ω–Ω—ã—Ö
    if (!file_exists(__DIR__ . '/data/ai_learning.json')) {
        saveJsonData('ai_learning.json', [
            'successful_generations' => [],
            'user_preferences' => [],
            'popular_combinations' => [],
            'pricing_patterns' => [],
            'seo_success_rates' => []
        ]);
    }

    if (!file_exists(__DIR__ . '/data/ai_user_actions.json')) {
        saveJsonData('ai_user_actions.json', []);
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if (!defined('SKIP_AUTO_INIT')) {
    initializeDefaultData();
}

?>
