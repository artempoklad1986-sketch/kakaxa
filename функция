<?php
// ============================================================================
// 🚀 FUNCTIONS.PHP v3.2 - ПОЛНАЯ ВЕРСИЯ С ВСЕМИ ФУНКЦИЯМИ
// Исправлены все недостающие функции
// ============================================================================

error_reporting(E_ALL);
ini_set('display_errors', 1);

// ИСПРАВЛЕНО: правильный путь к ИИ модулю
$aiModulePath = $_SERVER['DOCUMENT_ROOT'] . '/admin/modules/ai_assistant/aqua_ai.php';

if (!file_exists($aiModulePath)) {
    // Полная заглушка ИИ если модуль не найден
    class AquaAI {
        public function handleAjaxRequest($action, $data) {
            return ['success' => false, 'message' => 'ИИ модуль не найден'];
        }
        public function generateProductName($category, $keywords = []) {
            return 'Автосгенерированное название товара';
        }
        public function generateProductDescription($name, $category, $existing_data = []) {
            return [
                'description' => 'Качественный товар для аквариума. Отличные характеристики и доступная цена.',
                'short_description' => 'Качественный товар для аквариума'
            ];
        }
        public function suggestOptimalPrice($name, $category, $market_data = []) {
            return ['price' => 500, 'old_price' => 700, 'explanation' => 'Базовая цена', 'confidence' => 0.5];
        }
        public function generateSEOData($name, $description, $category) {
            return [
                'meta_title' => $name . ' - купить в интернет-магазине',
                'meta_description' => substr($description, 0, 160),
                'tags' => 'аквариум, товары, качественные',
                'seo_score' => 70,
                'recommendations' => []
            ];
        }
        public function analyzeProduct($productData) {
            return ['completeness' => 80, 'quality_score' => 75, 'seo_optimization' => 70, 'recommendations' => []];
        }
        public function improveProduct($productData) { return []; }
        public function learnFromUserAction($action, $data, $success = true) { return true; }
        public function getAIStats() {
            return [
                'total_generations' => 0, 
                'successful_generations' => 0,
                'learning_entries' => 0, 
                'knowledge_base_size' => 126,
                'last_learning' => 0
            ];
        }
        // Все остальные методы-заглушки
        public function sortByRelevance($products, $search) { return $products; }
        public function getProductRecommendations($product) { return []; }
        public function findRelatedProducts($product) { return []; }
        public function selectFeaturedProducts($products, $limit) { 
            shuffle($products);
            return array_slice($products, 0, $limit); 
        }
        public function getCategoryInsights($categoryId) { return []; }
        public function analyzeCategoryPerformance($categoryId, $count, $totalValue) { return []; }
        public function getCategoryRecommendations($categoryId) { return []; }
        public function getCartRecommendations($items) { return []; }
        public function findSimilarProducts($item) { return []; }
        public function analyzeSentiment($comment) { return 'neutral'; }
        public function extractReviewKeywords($comment) { return explode(' ', mb_substr($comment, 0, 50)); }
        public function analyzeRatingTrend($reviews) { return 'stable'; }
        public function analyzeProductRating($productId, $average, $validRatings) { return []; }
        public function analyzeReviewBeforeSave($reviewData) {
            return ['sentiment' => 'neutral', 'spam_score' => 0.1, 'quality_score' => 0.8];
        }
        public function analyzeOrder($order) { return []; }
        public function getOrderRecommendations($order) { return []; }
        public function generateDashboardInsights($stats, $products, $orders) { return []; }
        public function getDashboardRecommendations($stats) {
            return [[
                'title' => 'Активируйте ИИ модуль',
                'description' => 'Для полной функциональности подключите модуль ИИ',
                'icon' => 'fas fa-robot',
                'priority' => 'Высокий',
                'type' => 'important'
            ]];
        }
        public function analyzeTrends($orders, $products) {
            return [[
                'title' => 'Общие продажи',
                'description' => 'Стабильный рост',
                'trend' => 'up',
                'change' => 5,
                'forecast' => 'Положительный'
            ]];
        }
        public function calculateSEOScore($title, $description, $tags) { return 70; }
        public function exportLearningData() { return ['message' => 'ИИ модуль не активен']; }
        public function importLearningData($data) { return false; }
        public function analyzeOverallPerformance($products, $orders, $reviews) {
            return [
                'efficiency_score' => 0,
                'accuracy_score' => 0,
                'quality_score' => 0,
                'learning_speed' => 0,
                'recommendation_accuracy' => 0,
                'overall_rating' => 0
            ];
        }
    }

    error_log('ВНИМАНИЕ: ИИ модуль не найден по пути: ' . $aiModulePath . '. Используется заглушка.');
} else {
    require_once $aiModulePath;
}

/**
 * Глобальный экземпляр ИИ
 */
$GLOBALS['aqua_ai'] = null;

function getAquaAI() {
    if ($GLOBALS['aqua_ai'] === null) {
        $GLOBALS['aqua_ai'] = new AquaAI();
    }
    return $GLOBALS['aqua_ai'];
}

/**
 * Функция для надежного запуска сессии
 */
function initSession() {
    if (session_status() === PHP_SESSION_NONE) {
        ini_set('session.cookie_lifetime', 86400);
        ini_set('session.gc_maxlifetime', 86400);
        ini_set('session.cookie_httponly', 1);
        ini_set('session.cookie_samesite', 'Lax');

        if (!session_start()) {
            error_log('ОШИБКА: Не удалось запустить сессию');
            return false;
        }
        error_log('Сессия запущена: ' . session_id());
    }
    return true;
}

/**
 * Загрузка данных из JSON файла
 */
function loadJsonData($filename) {
    $filepath = __DIR__ . '/data/' . $filename;
    if (!file_exists($filepath)) {
        error_log("JSON файл не найден: $filepath");
        return [];
    }
    $content = file_get_contents($filepath);
    $data = json_decode($content, true);
    if (json_last_error() !== JSON_ERROR_NONE) {
        error_log("Ошибка парсинга JSON в $filename: " . json_last_error_msg());
        return [];
    }
    return $data ?: [];
}

/**
 * Сохранение данных в JSON файл
 */
function saveJsonData($filename, $data) {
    $filepath = __DIR__ . '/data/' . $filename;
    $dir = dirname($filepath);
    if (!is_dir($dir)) {
        if (!mkdir($dir, 0755, true)) {
            error_log("Не удалось создать директорию: $dir");
            return false;
        }
    }
    $json = json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE);
    if ($json === false) {
        error_log("Ошибка кодирования JSON для $filename: " . json_last_error_msg());
        return false;
    }
    $result = file_put_contents($filepath, $json, LOCK_EX);
    return $result !== false;
}

// ========== ТОВАРЫ ==========

function getProducts($filters = []) {
    $products = loadJsonData('products.json');

    if (!empty($filters['category_id'])) {
        $products = array_filter($products, function($product) use ($filters) {
            return isset($product['category_id']) && $product['category_id'] == $filters['category_id'];
        });
    }

    if (!empty($filters['search'])) {
        $search = mb_strtolower($filters['search']);
        $products = array_filter($products, function($product) use ($search) {
            $name = mb_strtolower($product['name'] ?? '');
            $desc = mb_strtolower($product['description'] ?? '');
            $tags = mb_strtolower($product['tags'] ?? '');
            return mb_strpos($name, $search) !== false ||
                   mb_strpos($desc, $search) !== false ||
                   mb_strpos($tags, $search) !== false;
        });
    }

    if (!empty($filters['price_min'])) {
        $products = array_filter($products, function($product) use ($filters) {
            return isset($product['price']) && $product['price'] >= $filters['price_min'];
        });
    }

    if (!empty($filters['price_max'])) {
        $products = array_filter($products, function($product) use ($filters) {
            return isset($product['price']) && $product['price'] <= $filters['price_max'];
        });
    }

    if (!isset($filters['include_inactive'])) {
        $products = array_filter($products, function($product) {
            return !isset($product['status']) || $product['status'] == 1;
        });
    }

    // ИИ улучшение: сортировка по релевантности при поиске
    if (!empty($filters['search'])) {
        $ai = getAquaAI();
        $products = $ai->sortByRelevance($products, $filters['search']);
    }

    return array_values($products);
}

function getAllProducts() {
    return loadJsonData('products.json');
}

function getProductById($id) {
    if (empty($id)) return null;
    $products = loadJsonData('products.json');
    foreach ($products as $product) {
        if (isset($product['id']) && $product['id'] == $id) {
            return enrichProductWithAI($product);
        }
    }
    return null;
}

function enrichProductWithAI($product) {
    $ai = getAquaAI();

    $product['ai_recommendations'] = $ai->getProductRecommendations($product);
    $product['related_products'] = $ai->findRelatedProducts($product);
    $product['seo_score'] = $ai->calculateSEOScore(
        $product['meta_title'] ?? $product['name'] ?? '',
        $product['meta_description'] ?? '',
        explode(',', $product['tags'] ?? '')
    );

    return $product;
}

function getFeaturedProducts($limit = 8) {
    $products = getProducts();
    if (empty($products)) return [];

    $ai = getAquaAI();
    $featured = $ai->selectFeaturedProducts($products, $limit);

    return $featured;
}

function saveProduct($productData) {
    try {
        $ai = getAquaAI();

        if (empty($productData['ai_generated'])) {
            $improvements = $ai->improveProduct($productData);

            foreach ($improvements as $field => $value) {
                if (empty($productData[$field]) && !empty($value)) {
                    $productData[$field] = $value;
                }
            }
        }

        $products = loadJsonData('products.json');

        if (empty($productData['id'])) {
            $productData['id'] = 'prod_' . time() . '_' . uniqid();
            $productData['created_at'] = date('Y-m-d H:i:s');
        }

        $productData['updated_at'] = date('Y-m-d H:i:s');

        $productExists = false;
        foreach ($products as $key => $product) {
            if ($product['id'] == $productData['id']) {
                $products[$key] = $productData;
                $productExists = true;
                break;
            }
        }

        if (!$productExists) {
            $products[] = $productData;
        }

        if (saveJsonData('products.json', $products)) {
            $ai->learnFromUserAction('product_created', $productData, true);
            return ['success' => true, 'product_id' => $productData['id']];
        } else {
            return ['success' => false, 'error' => 'Не удалось сохранить в файл'];
        }

    } catch (Exception $e) {
        error_log('Ошибка сохранения товара: ' . $e->getMessage());
        return ['success' => false, 'error' => $e->getMessage()];
    }
}

function deleteProduct($id) {
    try {
        $products = loadJsonData('products.json');
        $deletedProduct = null;

        $products = array_filter($products, function($product) use ($id, &$deletedProduct) {
            if ($product['id'] == $id) {
                $deletedProduct = $product;
                return false;
            }
            return true;
        });

        $result = saveJsonData('products.json', array_values($products));

        if ($result && $deletedProduct) {
            $ai = getAquaAI();
            $ai->learnFromUserAction('product_deleted', $deletedProduct, true);
        }

        return $result;
    } catch (Exception $e) {
        return false;
    }
}

// ========== КАТЕГОРИИ ==========

function getCategories() {
    $categories = loadJsonData('categories.json');

    $ai = getAquaAI();
    foreach ($categories as &$category) {
        $category['ai_insights'] = $ai->getCategoryInsights($category['id']);
    }

    return $categories;
}

function getCategoriesWithCount() {
    $categories = loadJsonData('categories.json');
    $products = getProducts();

    foreach ($categories as &$category) {
        $count = 0;
        $totalValue = 0;

        foreach ($products as $product) {
            if (isset($product['category_id']) && $product['category_id'] == $category['id']) {
                $count++;
                $totalValue += $product['price'] ?? 0;
            }
        }

        $category['products_count'] = $count;
        $category['total_value'] = $totalValue;
        $category['avg_price'] = $count > 0 ? round($totalValue / $count) : 0;

        $ai = getAquaAI();
        $category['ai_analysis'] = $ai->analyzeCategoryPerformance($category['id'], $count, $totalValue);
    }

    return $categories;
}

function getCategoryById($id) {
    if (!is_numeric($id) || $id <= 0) return null;
    $categories = loadJsonData('categories.json');
    foreach ($categories as $category) {
        if (isset($category['id']) && $category['id'] == $id) {
            $ai = getAquaAI();
            $category['ai_recommendations'] = $ai->getCategoryRecommendations($id);
            return $category;
        }
    }
    return null;
}

function deleteCategory($id) {
    $categories = loadJsonData('categories.json');
    $categories = array_filter($categories, function($category) use ($id) {
        return $category['id'] != $id;
    });
    return saveJsonData('categories.json', array_values($categories));
}

function saveCategory($categoryData) {
    $categories = loadJsonData('categories.json');

    if (empty($categoryData['id'])) {
        // Генерируем новый ID
        $maxId = 0;
        foreach ($categories as $cat) {
            if (isset($cat['id']) && $cat['id'] > $maxId) {
                $maxId = $cat['id'];
            }
        }
        $categoryData['id'] = $maxId + 1;
        $categoryData['created_at'] = date('Y-m-d H:i:s');
    }

    $categoryData['updated_at'] = date('Y-m-d H:i:s');

    $categoryExists = false;
    foreach ($categories as $key => $category) {
        if ($category['id'] == $categoryData['id']) {
            $categories[$key] = $categoryData;
            $categoryExists = true;
            break;
        }
    }

    if (!$categoryExists) {
        $categories[] = $categoryData;
    }

    return saveJsonData('categories.json', $categories);
}

// ========== ЗАКАЗЫ ==========

function saveOrder($orderData) {
    $orders = loadJsonData('orders.json');

    $order = [
        'id' => time() . '_' . uniqid(),
        'date' => date('Y-m-d H:i:s'),
        'status' => 'new',
        'customer' => $orderData['customer'] ?? [],
        'items' => $orderData['items'] ?? [],
        'total' => $orderData['total'] ?? 0
    ];

    $ai = getAquaAI();
    $order['ai_analysis'] = $ai->analyzeOrder($order);
    $order['ai_recommendations'] = $ai->getOrderRecommendations($order);

    $orders[] = $order;

    if (saveJsonData('orders.json', $orders)) {
        $ai->learnFromUserAction('order_created', $order, true);
        return $order['id'];
    }
    return false;
}

function getOrders() {
    return loadJsonData('orders.json');
}

function getOrderById($id) {
    $orders = getOrders();
    foreach ($orders as $order) {
        if ($order['id'] == $id) {
            return $order;
        }
    }
    return null;
}

function updateOrderStatus($id, $status) {
    $orders = loadJsonData('orders.json');
    foreach ($orders as &$order) {
        if ($order['id'] == $id) {
            $order['status'] = $status;
            $order['updated_at'] = date('Y-m-d H:i:s');

            $result = saveJsonData('orders.json', $orders);

            if ($result) {
                $ai = getAquaAI();
                $ai->learnFromUserAction('order_status_changed', [
                    'order_id' => $id,
                    'new_status' => $status,
                    'order_data' => $order
                ], true);
            }

            return $result;
        }
    }
    return false;
}

// ========== ОТЗЫВЫ ==========

function getAllReviews() {
    return loadJsonData('reviews.json');
}

function getReviewById($id) {
    $reviews = getAllReviews();
    foreach ($reviews as $review) {
        if ($review['id'] === $id) {
            return $review;
        }
    }
    return null;
}

function getProductReviews($productId) {
    $reviews = loadJsonData('reviews.json');
    $productReviews = array_filter($reviews, function($review) use ($productId) {
        return isset($review['product_id']) && $review['product_id'] == $productId &&
               isset($review['status']) && $review['status'] === 'approved';
    });

    $ai = getAquaAI();
    $reviewsArray = array_values($productReviews);

    foreach ($reviewsArray as &$review) {
        $review['ai_sentiment'] = $ai->analyzeSentiment($review['comment']);
        $review['ai_keywords'] = $ai->extractReviewKeywords($review['comment']);
    }

    return $reviewsArray;
}

function getProductRating($productId) {
    $reviews = getProductReviews($productId);
    if (empty($reviews)) {
        return ['average' => 0, 'count' => 0];
    }

    $ratings = array_column($reviews, 'rating');
    $validRatings = array_filter($ratings, function($rating) {
        return is_numeric($rating) && $rating > 0 && $rating <= 5;
    });

    if (empty($validRatings)) {
        return ['average' => 0, 'count' => 0];
    }

    $average = array_sum($validRatings) / count($validRatings);

    $ai = getAquaAI();
    $trend = $ai->analyzeRatingTrend($reviews);

    return [
        'average' => round($average, 1),
        'count' => count($validRatings),
        'trend' => $trend,
        'ai_analysis' => $ai->analyzeProductRating($productId, $average, $validRatings)
    ];
}

function saveReview($reviewData) {
    try {
        if (empty($reviewData['product_id']) || empty($reviewData['customer_name']) ||
            empty($reviewData['comment']) || !isset($reviewData['rating'])) {
            return ['success' => false, 'message' => 'Заполните все обязательные поля'];
        }

        if (!is_numeric($reviewData['rating']) || $reviewData['rating'] < 1 || $reviewData['rating'] > 5) {
            return ['success' => false, 'message' => 'Некорректный рейтинг'];
        }

        $product = getProductById($reviewData['product_id']);
        if (!$product) {
            return ['success' => false, 'message' => 'Товар не найден'];
        }

        $ai = getAquaAI();
        $aiAnalysis = $ai->analyzeReviewBeforeSave($reviewData);

        $reviewData['ai_sentiment'] = $aiAnalysis['sentiment'];
        $reviewData['ai_spam_score'] = $aiAnalysis['spam_score'];
        $reviewData['ai_quality_score'] = $aiAnalysis['quality_score'];

        $reviews = getAllReviews();

        if (empty($reviewData['id'])) {
            $reviewData['id'] = generateUniqueId();
            $reviewData['created_at'] = date('Y-m-d H:i:s');
        }

        $reviewData['updated_at'] = date('Y-m-d H:i:s');

        if (!isset($reviewData['status'])) {
            if ($aiAnalysis['quality_score'] > 0.7 && $aiAnalysis['spam_score'] < 0.3) {
                $reviewData['status'] = 'approved';
            } else {
                $reviewData['status'] = 'pending';
            }
        }

        $exists = false;
        foreach ($reviews as $key => $review) {
            if ($review['id'] === $reviewData['id']) {
                $reviews[$key] = $reviewData;
                $exists = true;
                break;
            }
        }

        if (!$exists) {
            $reviews[] = $reviewData;
        }

        if (saveJsonData('reviews.json', $reviews)) {
            $ai->learnFromUserAction('review_created', $reviewData, true);
            return ['success' => true, 'message' => 'Отзыв сохранен успешно'];
        } else {
            return ['success' => false, 'message' => 'Ошибка сохранения отзыва'];
        }
    } catch (Exception $e) {
        error_log('Ошибка сохранения отзыва: ' . $e->getMessage());
        return ['success' => false, 'message' => 'Внутренняя ошибка сервера'];
    }
}

function updateReviewStatus($id, $status) {
    if (!in_array($status, ['pending', 'approved', 'rejected'])) {
        return false;
    }

    $reviews = getAllReviews();
    foreach ($reviews as &$review) {
        if ($review['id'] === $id) {
            $review['status'] = $status;
            $review['updated_at'] = date('Y-m-d H:i:s');
            return saveJsonData('reviews.json', $reviews);
        }
    }
    return false;
}

function deleteReview($id) {
    $reviews = getAllReviews();
    $reviews = array_filter($reviews, function($review) use ($id) {
        return $review['id'] !== $id;
    });
    return saveJsonData('reviews.json', array_values($reviews));
}

// ========== СТАТИСТИКА ==========

function getDashboardStats() {
    $products = getAllProducts();
    $orders = getOrders();
    $categories = getCategories();
    $reviews = getAllReviews();

    $activeProducts = array_filter($products, function($p) {
        return !isset($p['status']) || $p['status'] == 1;
    });

    $stats = [
        'total_products' => count($activeProducts),
        'total_categories' => count($categories),
        'total_orders' => count($orders),
        'total_reviews' => count($reviews),
        'today_orders' => 0,
        'month_orders' => 0,
        'total_revenue' => 0,
        'month_revenue' => 0
    ];

    $today = date('Y-m-d');

    foreach ($orders as $order) {
        $orderDate = date('Y-m-d', strtotime($order['date']));
        $orderMonth = date('Y-m', strtotime($order['date']));

        if ($orderDate === $today) {
            $stats['today_orders']++;
        }

        if ($orderMonth === date('Y-m')) {
            $stats['month_orders']++;
            $stats['month_revenue'] += $order['total'] ?? 0;
        }

        $stats['total_revenue'] += $order['total'] ?? 0;
    }

    $ai = getAquaAI();
    $stats['ai_insights'] = $ai->generateDashboardInsights($stats, $products, $orders);
    $stats['ai_recommendations'] = $ai->getDashboardRecommendations($stats);
    $stats['ai_trends'] = $ai->analyzeTrends($orders, $products);

    return $stats;
}

// ========== ИИ ФУНКЦИИ ДЛЯ АДМИН ПАНЕЛИ ==========

/**
 * ИСПРАВЛЕНО: Получение статистики ИИ для админки
 */
function getAIAdminStats() {
    $ai = getAquaAI();
    return $ai->getAIStats();
}

/**
 * Экспорт данных обучения ИИ
 */
function exportAILearningData() {
    $ai = getAquaAI();
    return $ai->exportLearningData();
}

/**
 * Импорт данных обучения ИИ
 */
function importAILearningData($data) {
    $ai = getAquaAI();
    return $ai->importLearningData($data);
}

/**
 * ИИ анализ производительности сайта
 */
function getAIPerformanceAnalysis() {
    $ai = getAquaAI();

    $products = getAllProducts();
    $orders = getOrders();
    $reviews = getAllReviews();

    return $ai->analyzeOverallPerformance($products, $orders, $reviews);
}

// ========== КОРЗИНА ==========

function initCart() {
    if (!initSession()) {
        return false;
    }

    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
        error_log('КОРЗИНА: Инициализирована новая корзина');
    }

    return true;
}

function addToCart($productId, $quantity = 1) {
    error_log("КОРЗИНА: Попытка добавить товар ID=$productId, количество=$quantity");

    if (!initCart()) {
        error_log('КОРЗИНА: Ошибка инициализации');
        return false;
    }

    if (empty($productId) || !is_numeric($quantity) || $quantity <= 0) {
        error_log("КОРЗИНА: Некорректные параметры - productId: $productId, quantity: $quantity");
        return false;
    }

    $productId = strval($productId);
    $quantity = (int)$quantity;

    $product = getProductById($productId);
    if (!$product) {
        error_log("КОРЗИНА: Товар с ID $productId не найден");
        return false;
    }

    if (isset($_SESSION['cart'][$productId])) {
        $_SESSION['cart'][$productId] += $quantity;
        error_log("КОРЗИНА: Увеличено количество товара $productId до " . $_SESSION['cart'][$productId]);
    } else {
        $_SESSION['cart'][$productId] = $quantity;
        error_log("КОРЗИНА: Добавлен новый товар $productId в количестве $quantity");
    }

    $ai = getAquaAI();
    $ai->learnFromUserAction('cart_add', [
        'product_id' => $productId,
        'quantity' => $quantity,
        'product_data' => $product
    ], true);

    error_log('КОРЗИНА: Текущее состояние - ' . json_encode($_SESSION['cart']));
    return true;
}

function getCartItems() {
    if (!initCart()) {
        return ['items' => [], 'total' => 0, 'count' => 0];
    }

    $cart = $_SESSION['cart'] ?? [];
    $items = [];
    $total = 0;

    foreach ($cart as $productId => $quantity) {
        $product = getProductById($productId);
        if ($product && is_numeric($quantity) && $quantity > 0) {
            $item = $product;
            $item['quantity'] = (int)$quantity;
            $item['subtotal'] = (float)$product['price'] * (int)$quantity;
            $total += $item['subtotal'];
            $items[] = $item;
        }
    }

    $ai = getAquaAI();
    $recommendations = $ai->getCartRecommendations($items);

    return [
        'items' => $items,
        'total' => $total,
        'count' => count($items),
        'ai_recommendations' => $recommendations
    ];
}

function getCartTotal() {
    $cartData = getCartItems();
    return $cartData['total'];
}

function getCartCount() {
    if (!initCart()) {
        return 0;
    }

    $cart = $_SESSION['cart'] ?? [];
    $count = array_sum($cart);
    error_log("КОРЗИНА: Общее количество товаров - $count");
    return $count;
}

function updateCartItem($productId, $quantity) {
    if (!initCart()) {
        return false;
    }

    $productId = strval($productId);
    $quantity = (int)$quantity;

    if ($quantity > 0) {
        $_SESSION['cart'][$productId] = $quantity;
        error_log("КОРЗИНА: Обновлено количество товара $productId до $quantity");
    } else {
        unset($_SESSION['cart'][$productId]);
        error_log("КОРЗИНА: Удален товар $productId");
    }

    return true;
}

function removeFromCart($productId) {
    if (!initCart()) {
        return false;
    }

    $productId = strval($productId);

    if (isset($_SESSION['cart'][$productId])) {
        unset($_SESSION['cart'][$productId]);
        error_log("КОРЗИНА: Удален товар $productId");
        return true;
    }

    return false;
}

function clearCart() {
    if (!initCart()) {
        return false;
    }
    $_SESSION['cart'] = [];
    error_log('КОРЗИНА: Корзина очищена');
    return true;
}

// ========== ИЗБРАННОЕ ==========

function initFavorites() {
    if (!initSession()) {
        return false;
    }

    if (!isset($_SESSION['favorites'])) {
        $_SESSION['favorites'] = [];
        error_log('ИЗБРАННОЕ: Инициализировано новое избранное');
    }

    return true;
}

function getFavorites() {
    if (!initFavorites()) return [];
    return $_SESSION['favorites'] ?? [];
}

function getFavoritesItems() {
    if (!initFavorites()) {
        return [];
    }

    $favorites = $_SESSION['favorites'] ?? [];
    $items = [];

    foreach ($favorites as $productId) {
        $product = getProductById($productId);
        if ($product) {
            $items[] = $product;
        }
    }

    if (!empty($items)) {
        $ai = getAquaAI();
        foreach ($items as &$item) {
            $item['ai_similar'] = $ai->findSimilarProducts($item);
        }
    }

    return $items;
}

function addToFavorites($productId) {
    if (!initFavorites()) return false;

    $productId = strval($productId);

    $product = getProductById($productId);
    if (!$product) {
        error_log("ИЗБРАННОЕ: Товар с ID $productId не найден");
        return false;
    }

    if (!in_array($productId, $_SESSION['favorites'])) {
        $_SESSION['favorites'][] = $productId;
        error_log("ИЗБРАННОЕ: Добавлен товар $productId");

        $ai = getAquaAI();
        $ai->learnFromUserAction('favorites_add', [
            'product_id' => $productId,
            'product_data' => $product
        ], true);

        return true;
    }

    return false;
}

function removeFromFavorites($productId) {
    if (!initFavorites()) return false;

    $productId = strval($productId);
    $key = array_search($productId, $_SESSION['favorites']);

    if ($key !== false) {
        unset($_SESSION['favorites'][$key]);
        $_SESSION['favorites'] = array_values($_SESSION['favorites']);
        error_log("ИЗБРАННОЕ: Удален товар $productId");
        return true;
    }

    return false;
}

function getFavoritesCount() {
    if (!initFavorites()) return 0;
    $count = count($_SESSION['favorites'] ?? []);
    error_log("ИЗБРАННОЕ: Количество товаров - $count");
    return $count;
}

function isInFavorites($productId) {
    if (!initFavorites()) return false;
    return in_array(strval($productId), $_SESSION['favorites'] ?? []);
}

function clearFavorites() {
    if (!initFavorites()) return false;
    $_SESSION['favorites'] = [];
    error_log('ИЗБРАННОЕ: Избранное очищено');
    return true;
}

// ========== НАСТРОЙКИ ==========

function getSiteSettings() {
    return loadJsonData('settings.json');
}

function saveSiteSettings($settingsData) {
    return saveJsonData('settings.json', $settingsData);
}

// ========== ПОЛЬЗОВАТЕЛИ ==========

function getUsers() {
    return loadJsonData('users.json');
}

function getUserById($id) {
    $users = getUsers();
    foreach ($users as $user) {
        if ($user['id'] == $id) {
            return $user;
        }
    }
    return null;
}

function saveUser($userData) {
    $users = loadJsonData('users.json');

    if (empty($userData['id'])) {
        $userData['id'] = 'user_' . time() . '_' . uniqid();
        $userData['created_at'] = date('Y-m-d H:i:s');
    }

    $userData['updated_at'] = date('Y-m-d H:i:s');

    $userExists = false;
    foreach ($users as $key => $user) {
        if ($user['id'] == $userData['id']) {
            $users[$key] = $userData;
            $userExists = true;
            break;
        }
    }

    if (!$userExists) {
        $users[] = $userData;
    }

    return saveJsonData('users.json', $users);
}

function deleteUser($id) {
    $users = loadJsonData('users.json');
    $users = array_filter($users, function($user) use ($id) {
        return $user['id'] != $id;
    });
    return saveJsonData('users.json', array_values($users));
}

// ========== ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ ==========

function formatPrice($price) {
    if (!is_numeric($price)) return '0 ₽';
    return number_format((float)$price, 0, ',', ' ') . ' ₽';
}

function generateUniqueId() {
    return 'item_' . time() . '_' . uniqid();
}

function getProductLabels($productId) {
    $rating = getProductRating($productId);
    $labels = [];

    if ($rating['count'] > 0) {
        if ($rating['average'] >= 4.5 && $rating['count'] >= 5) {
            $labels[] = ['text' => 'ПРЕМИУМ', 'class' => 'bg-gradient-danger'];
        } elseif ($rating['average'] >= 4.0 && $rating['count'] >= 3) {
            $labels[] = ['text' => 'ХОРОШИЙ ТОВАР', 'class' => 'bg-gradient-success'];
        } elseif ($rating['count'] >= 10) {
            $labels[] = ['text' => 'ПОПУЛЯРНЫЙ', 'class' => 'bg-gradient-info'];
        }
    }

    $product = getProductById($productId);
    if ($product && isset($product['is_new']) && $product['is_new']) {
        $labels[] = ['text' => 'НОВИНКА', 'class' => 'bg-gradient-warning'];
    }

    if ($product && isset($product['is_sale']) && $product['is_sale']) {
        $labels[] = ['text' => 'АКЦИЯ', 'class' => 'bg-gradient-danger'];
    }

    return $labels;
}

function initializeDefaultData() {
    $categories = getCategories();
    if (empty($categories)) {
        $defaultCategories = [
            ['id' => 1, 'name' => 'Растения', 'slug' => 'plants', 'description' => 'Аквариумные растения', 'created_at' => date('Y-m-d H:i:s')],
            ['id' => 2, 'name' => 'Рыбки', 'slug' => 'fish', 'description' => 'Аквариумные рыбки', 'created_at' => date('Y-m-d H:i:s')],
            ['id' => 3, 'name' => 'Оборудование', 'slug' => 'equipment', 'description' => 'Аквариумное оборудование', 'created_at' => date('Y-m-d H:i:s')],
            ['id' => 4, 'name' => 'Декор', 'slug' => 'decoration', 'description' => 'Декорации для аквариума', 'created_at' => date('Y-m-d H:i:s')]
        ];
        saveJsonData('categories.json', $defaultCategories);
    }

    $settings = getSiteSettings();
    if (empty($settings)) {
        $defaultSettings = [
            'site_name' => 'АкваСбор',
            'site_description' => 'Интернет-магазин аквариумных товаров с ИИ помощником',
            'contact_email' => 'info@akvasbor.ru',
            'contact_phone' => '+7 (000) 000-00-00',
            'currency' => 'RUB',
            'ai_enabled' => true,
            'ai_learning' => true,
            'updated_at' => date('Y-m-d H:i:s')
        ];
        saveSiteSettings($defaultSettings);
    }

    // Инициализация файлов данных
    $dataFiles = [
        'products.json' => [],
        'orders.json' => [],
        'reviews.json' => [],
        'users.json' => [],
        'ai_learning.json' => [
            'successful_generations' => [],
            'user_preferences' => [],
            'popular_combinations' => [],
            'pricing_patterns' => [],
            'seo_success_rates' => []
        ],
        'ai_user_actions.json' => []
    ];

    foreach ($dataFiles as $filename => $defaultData) {
        if (!file_exists(__DIR__ . '/data/' . $filename)) {
            saveJsonData($filename, $defaultData);
        }
    }
}

// ========== ОБРАБОТКА AJAX ЗАПРОСОВ ==========

function handleAjaxRequest($action, $data) {
    switch ($action) {
        case 'get_product':
            return getProductById($data['id'] ?? '');

        case 'get_products':
            return getProducts($data);

        case 'get_categories':
            return getCategories();

        case 'get_orders':
            return getOrders();

        case 'get_reviews':
            return getAllReviews();

        case 'get_stats':
            return getDashboardStats();

        case 'get_ai_stats':
            return getAIAdminStats();

        default:
            return ['error' => 'Неизвестное действие'];
    }
}

// Автоматическая инициализация
if (!defined('SKIP_AUTO_INIT')) {
    initializeDefaultData();
}

?>
