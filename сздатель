<?php
// ============================================================================
// ü§ñ –ú–û–î–£–õ–¨ –ò–ò –ü–û–ú–û–©–ù–ò–ö–ê v2.2 - –ò–°–ü–†–ê–í–õ–ï–ù JSON –ü–ê–†–°–ò–ù–ì
// –£–±—Ä–∞–Ω—ã –≤—Å–µ HTML —Ç–µ–≥–∏ –∏ –ª–∏—à–Ω–∏–π –≤—ã–≤–æ–¥ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ JSON
// ============================================================================

// –û—Ç–∫–ª—é—á–∞–µ–º –≤–µ—Å—å –≤—ã–≤–æ–¥ –∫—Ä–æ–º–µ JSON
ob_start();

class AquaAI {

    private $knowledgeBase;
    private $learningData;
    private $userActions;
    private $dataPath;

    public function __construct() {
        // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º
        $this->dataPath = $_SERVER['DOCUMENT_ROOT'] . '/admin/data/';
        $this->initializeKnowledgeBase();
        $this->loadLearningData();
    }

    private function initializeKnowledgeBase() {
        $this->knowledgeBase = [
            'plants' => [
                'easy_care' => [
                    'anubias' => [
                        'scientific_name' => 'Anubias barteri var. nana',
                        'common_names' => ['–ê–Ω—É–±–∏–∞—Å –Ω–∞–Ω–∞', '–ö–∞—Ä–ª–∏–∫–æ–≤—ã–π –∞–Ω—É–±–∏–∞—Å', '–ê–Ω—É–±–∏–∞—Å –ë–∞—Ä—Ç–µ—Ä–∞ –Ω–∞–Ω–∞'],
                        'description' => '–ù–µ–ø—Ä–∏—Ö–æ—Ç–ª–∏–≤–æ–µ –º–µ–¥–ª–µ–Ω–Ω–æ—Ä–∞—Å—Ç—É—â–µ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ —Å —Ç–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–º–∏ –∫–æ–∂–∏—Å—Ç—ã–º–∏ –ª–∏—Å—Ç—å—è–º–∏. –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –∞–∫–≤–∞—Ä–∏—É–º–∏—Å—Ç–æ–≤.',
                        'care_requirements' => [
                            'lighting' => '–ù–∏–∑–∫–æ–µ-—Å—Ä–µ–¥–Ω–µ–µ (0.25-0.5 –í—Ç/–ª)',
                            'temperature' => '22-28¬∞C',
                            'ph' => '6.0-8.0',
                            'hardness' => '2-15 dGH',
                            'co2' => '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è',
                            'fertilization' => '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è, –∂–∏–¥–∫–∏–µ —É–¥–æ–±—Ä–µ–Ω–∏—è 1-2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é'
                        ],
                        'placement' => '–ü–µ—Ä–µ–¥–Ω–∏–π/—Å—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω, –∫–æ—Ä—è–≥–∏, –∫–∞–º–Ω–∏',
                        'growth_rate' => '–û—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω—ã–π',
                        'size' => '5-15 —Å–º',
                        'compatibility' => '–°–æ–≤–º–µ—Å—Ç–∏–º —Å–æ –≤—Å–µ–º–∏ —Ä—ã–±–∞–º–∏, –≤–∫–ª—é—á–∞—è —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—è–¥–Ω—ã—Ö',
                        'propagation' => '–î–µ–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–∏—â–∞',
                        'benefits' => [
                            '–ü–æ–≥–ª–æ—â–∞–µ—Ç –Ω–∏—Ç—Ä–∞—Ç—ã –∏ —Ñ–æ—Å—Ñ–∞—Ç—ã',
                            '–°–æ–∑–¥–∞–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É–∫—Ä—ã—Ç–∏—è –¥–ª—è –º–∞–ª—å–∫–æ–≤',
                            '–ù–µ–ø—Ä–∏—Ö–æ—Ç–ª–∏–≤ –∫ —É—Å–ª–æ–≤–∏—è–º',
                            '–ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç - —Ä–µ–¥–∫–æ —Ç—Ä–µ–±—É–µ—Ç –æ–±—Ä–µ–∑–∫–∏'
                        ],
                        'price_range' => [300, 800],
                        'tags' => ['–Ω–µ–ø—Ä–∏—Ö–æ—Ç–ª–∏–≤—ã–µ', '–º–µ–¥–ª–µ–Ω–Ω–æ—Ä–∞—Å—Ç—É—â–∏–µ', '—Ç–µ–Ω–µ–ª—é–±–∏–≤—ã–µ', '–¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö', '—ç–ø–∏—Ñ–∏—Ç']
                    ],
                    'java_moss' => [
                        'scientific_name' => 'Taxiphyllum barbieri',
                        'common_names' => ['–Ø–≤–∞–Ω—Å–∫–∏–π –º–æ—Ö', 'Java moss'],
                        'description' => '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–æ—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ª–∞–Ω–¥—à–∞—Ñ—Ç–∞. –ë—ã—Å—Ç—Ä–æ —Ä–∞—Å—Ç–µ—Ç –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –ª—é–±—ã–º —É—Å–ª–æ–≤–∏—è–º.',
                        'care_requirements' => [
                            'lighting' => '–ù–∏–∑–∫–æ–µ-–≤—ã—Å–æ–∫–æ–µ (0.2-1.0 –í—Ç/–ª)',
                            'temperature' => '15-30¬∞C',
                            'ph' => '5.0-9.0',
                            'hardness' => '2-25 dGH',
                            'co2' => '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è',
                            'fertilization' => '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'
                        ],
                        'placement' => '–õ—é–±–æ–µ –º–µ—Å—Ç–æ, –∫–æ—Ä—è–≥–∏, –∫–∞–º–Ω–∏, —Å—É–±—Å—Ç—Ä–∞—Ç',
                        'growth_rate' => '–ë—ã—Å—Ç—Ä—ã–π',
                        'size' => '3-10 —Å–º',
                        'compatibility' => '–°–æ–≤–º–µ—Å—Ç–∏–º —Å–æ –≤—Å–µ–º–∏ —Ä—ã–±–∞–º–∏',
                        'benefits' => [
                            '–ò–¥–µ–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –Ω–µ—Ä–µ—Å—Ç–∞',
                            '–£–∫—Ä—ã—Ç–∏–µ –¥–ª—è –º–∞–ª—å–∫–æ–≤',
                            '–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä',
                            '–ù–∞—Å—ã—â–∞–µ—Ç –≤–æ–¥—É –∫–∏—Å–ª–æ—Ä–æ–¥–æ–º'
                        ],
                        'price_range' => [150, 400],
                        'tags' => ['–º—Ö–∏', '–±—ã—Å—Ç—Ä–æ—Ä–∞—Å—Ç—É—â–∏–µ', '—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ', '–¥–ª—è –Ω–µ—Ä–µ—Å—Ç–∞']
                    ]
                ]
            ],
            'fish' => [
                'peaceful_community' => [
                    'neon_tetra' => [
                        'scientific_name' => 'Paracheirodon innesi',
                        'common_names' => ['–ù–µ–æ–Ω –≥–æ–ª—É–±–æ–π', '–ù–µ–æ–Ω –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–π'],
                        'description' => '–Ø—Ä–∫–∞—è —Å—Ç–∞–π–Ω–∞—è —Ä—ã–±–∫–∞ —Å –Ω–µ–æ–Ω–æ–≤–æ–π –ø–æ–ª–æ—Å–æ–π. –ú–∏—Ä–Ω–∞—è –∏ –∞–∫—Ç–∏–≤–Ω–∞—è.',
                        'care_requirements' => [
                            'temperature' => '20-26¬∞C',
                            'ph' => '5.0-7.0',
                            'hardness' => '1-10 dGH',
                            'tank_size' => '–û—Ç 40 –ª–∏—Ç—Ä–æ–≤',
                            'group_size' => '–û—Ç 6 –æ—Å–æ–±–µ–π'
                        ],
                        'size' => '3-4 —Å–º',
                        'lifespan' => '5-8 –ª–µ—Ç',
                        'feeding' => '–í—Å–µ—è–¥–Ω—ã–µ, –º–µ–ª–∫–∏–π –∫–æ—Ä–º',
                        'behavior' => '–ú–∏—Ä–Ω—ã–µ, —Å—Ç–∞–π–Ω—ã–µ',
                        'breeding' => '–°–ª–æ–∂–Ω–æ–µ, —Ç—Ä–µ–±—É–µ—Ç –º—è–≥–∫–æ–π –≤–æ–¥—ã',
                        'price_range' => [50, 150],
                        'tags' => ['—Å—Ç–∞–π–Ω—ã–µ', '–º–∏—Ä–Ω—ã–µ', '—è—Ä–∫–∏–µ', '—Ö–∞—Ä–∞—Ü–∏–Ω–∫–∏']
                    ]
                ]
            ],
            'equipment' => [
                'filtration' => [
                    'internal_filters' => [
                        'description' => '–ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –∞–∫–≤–∞—Ä–∏—É–º–æ–≤',
                        'benefits' => ['–≠–∫–æ–Ω–æ–º–∏—è –º–µ—Å—Ç–∞', '–ü—Ä–æ—Å—Ç–æ—Ç–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è', '–î–æ—Å—Ç—É–ø–Ω–∞—è —Ü–µ–Ω–∞'],
                        'suitable_for' => '–ê–∫–≤–∞—Ä–∏—É–º—ã –¥–æ 100 –ª–∏—Ç—Ä–æ–≤',
                        'price_range' => [800, 3000],
                        'tags' => ['—Ñ–∏–ª—å—Ç—Ä—ã', '–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ', '–∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ']
                    ]
                ]
            ]
        ];
    }

    private function loadLearningData() {
        $this->learningData = $this->loadJsonData('ai_learning.json') ?: [
            'successful_generations' => [],
            'user_preferences' => [],
            'popular_combinations' => [],
            'pricing_patterns' => [],
            'seo_success_rates' => []
        ];

        $this->userActions = $this->loadJsonData('ai_user_actions.json') ?: [];
    }

    private function loadJsonData($filename) {
        $filepath = $this->dataPath . $filename;
        if (!file_exists($filepath)) {
            return [];
        }
        $content = file_get_contents($filepath);
        $data = json_decode($content, true);
        if (json_last_error() !== JSON_ERROR_NONE) {
            return [];
        }
        return $data ?: [];
    }

    private function saveJsonData($filename, $data) {
        $filepath = $this->dataPath . $filename;
        $dir = dirname($filepath);
        if (!is_dir($dir)) {
            if (!mkdir($dir, 0755, true)) {
                return false;
            }
        }
        $json = json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE);
        if ($json === false) {
            return false;
        }
        $result = file_put_contents($filepath, $json, LOCK_EX);
        return $result !== false;
    }

    public function learnFromUserAction($action, $data, $success = true) {
        $learningEntry = [
            'timestamp' => time(),
            'action' => $action,
            'data' => $data,
            'success' => $success,
            'user_id' => $_SESSION['user_id'] ?? 'guest'
        ];

        $this->userActions[] = $learningEntry;

        if ($success) {
            switch ($action) {
                case 'description_generated':
                    $this->analyzeSuccessfulDescription($data);
                    break;
                case 'price_accepted':
                    $this->analyzePricingPattern($data);
                    break;
            }
        }

        $this->saveJsonData('ai_user_actions.json', array_slice($this->userActions, -1000));
        $this->updateLearningPatterns();
    }

    private function analyzeSuccessfulDescription($data) {
        // –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π
    }

    private function analyzePricingPattern($data) {
        // –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    }

    private function updateLearningPatterns() {
        $this->saveJsonData('ai_learning.json', $this->learningData);
    }

    public function generateProductName($category = '', $keywords = []) {
        $templates = $this->getNameTemplates($category);
        $bestTemplate = $this->selectBestTemplate($templates, $keywords);
        $variations = $this->generateNameVariations($bestTemplate, [], $keywords);
        return $this->selectBestName($variations);
    }

    private function getNameTemplates($category) {
        $templates = [
            '1' => [
                '{name} - –Ω–µ–ø—Ä–∏—Ö–æ—Ç–ª–∏–≤–æ–µ –∞–∫–≤–∞—Ä–∏—É–º–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ',
                '–ñ–∏–≤–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ {name} –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞',
                '{name} - –∑–µ–ª–µ–Ω—å –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞ –ø—Ä–µ–º–∏—É–º –∫–ª–∞—Å—Å–∞'
            ],
            '2' => [
                '–ê–∫–≤–∞—Ä–∏—É–º–Ω–∞—è —Ä—ã–±–∫–∞ {name} - —è—Ä–∫–∞—è –∏ –∞–∫—Ç–∏–≤–Ω–∞—è',
                '{name} - –∫—Ä–∞—Å–∏–≤—ã–µ —Ä—ã–±–∫–∏ –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞',
                '–ñ–∏–≤—ã–µ —Ä—ã–±—ã {name} - –∑–¥–æ—Ä–æ–≤—ã–µ –æ—Å–æ–±–∏'
            ],
            '3' => [
                '–ê–∫–≤–∞—Ä–∏—É–º–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ {name} - –Ω–∞–¥–µ–∂–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ',
                '{name} –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞ - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'
            ]
        ];

        return $templates[$category] ?? $templates['1'];
    }

    private function selectBestTemplate($templates, $keywords) {
        return $templates[0] ?? '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞';
    }

    private function generateNameVariations($template, $categoryData, $keywords) {
        $variations = [];

        if (!empty($keywords)) {
            $name = implode(' ', array_slice($keywords, 0, 3));
            $variations[] = str_replace('{name}', $name, $template);
        }

        $variations[] = str_replace('{name}', '–ü—Ä–µ–º–∏—É–º —Ç–æ–≤–∞—Ä', $template);
        return $variations;
    }

    private function selectBestName($variations) {
        return $variations[0] ?? '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞';
    }

    public function generateProductDescription($name, $category, $existing_data = []) {
        $knowledge = $this->getProductKnowledge($name, $category);

        if (!$knowledge) {
            $knowledge = $this->generateKnowledgeFromLearning($name, $category);
        }

        $description = $this->buildDescription($knowledge, $existing_data);
        $shortDescription = $this->generateShortDescription($description, $name);

        $this->learnFromUserAction('description_generated', [
            'name' => $name,
            'category' => $category,
            'description_length' => strlen($description)
        ]);

        return [
            'description' => $description,
            'short_description' => $shortDescription
        ];
    }

    private function getProductKnowledge($name, $category) {
        $name_lower = mb_strtolower($name);

        foreach ($this->knowledgeBase as $categoryKey => $categoryData) {
            foreach ($categoryData as $subcategory => $items) {
                foreach ($items as $itemKey => $itemData) {
                    if (isset($itemData['scientific_name']) &&
                        mb_strpos($name_lower, mb_strtolower($itemData['scientific_name'])) !== false) {
                        return $itemData;
                    }

                    if (isset($itemData['common_names'])) {
                        foreach ($itemData['common_names'] as $commonName) {
                            if (mb_strpos($name_lower, mb_strtolower($commonName)) !== false) {
                                return $itemData;
                            }
                        }
                    }

                    if (mb_strpos($name_lower, $itemKey) !== false) {
                        return $itemData;
                    }
                }
            }
        }

        return null;
    }

    private function generateKnowledgeFromLearning($name, $category) {
        return [
            'description' => '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞',
            'benefits' => [
                '–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ',
                '–î–æ—Å—Ç—É–ø–Ω–∞—è —Ü–µ–Ω–∞',
                '–ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞'
            ]
        ];
    }

    private function buildDescription($knowledge, $existing_data = []) {
        if (!$knowledge) {
            return $this->generateGenericDescription($existing_data);
        }

        $description = '';

        if (isset($knowledge['description'])) {
            $description .= $knowledge['description'] . "\n\n";
        }

        if (isset($knowledge['care_requirements'])) {
            $description .= "–£—Å–ª–æ–≤–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è:\n";
            foreach ($knowledge['care_requirements'] as $param => $value) {
                $paramNames = [
                    'lighting' => '–û—Å–≤–µ—â–µ–Ω–∏–µ',
                    'temperature' => '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
                    'ph' => 'pH —É—Ä–æ–≤–µ–Ω—å',
                    'hardness' => '–ñ–µ—Å—Ç–∫–æ—Å—Ç—å',
                    'co2' => 'CO2',
                    'fertilization' => '–£–¥–æ–±—Ä–µ–Ω–∏—è'
                ];
                $paramName = $paramNames[$param] ?? ucfirst($param);
                $description .= "‚Ä¢ $paramName: $value\n";
            }
            $description .= "\n";
        }

        if (isset($knowledge['benefits'])) {
            $description .= "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n";
            foreach ($knowledge['benefits'] as $benefit) {
                $description .= "‚Ä¢ $benefit\n";
            }
            $description .= "\n";
        }

        if (isset($knowledge['placement'])) {
            $description .= "–†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ –∞–∫–≤–∞—Ä–∏—É–º–µ: " . $knowledge['placement'] . "\n\n";
        }

        if (isset($knowledge['compatibility'])) {
            $description .= "–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: " . $knowledge['compatibility'] . "\n\n";
        }

        $description .= "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—ã—Ç–Ω—ã–º–∏ –∞–∫–≤–∞—Ä–∏—É–º–∏—Å—Ç–∞–º–∏\n";
        $description .= "–ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞\n";
        $description .= "–ë—ã—Å—Ç—Ä–∞—è –∏ –±–µ—Ä–µ–∂–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞";

        return $description;
    }

    private function generateGenericDescription($existing_data) {
        return '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞. –û—Ç–ª–∏—á–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞—è —Ü–µ–Ω–∞.' . "\n\n" .
               '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:' . "\n" .
               '‚Ä¢ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ' . "\n" .
               '‚Ä¢ –ü—Ä–æ—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è' . "\n" .
               '‚Ä¢ –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å' . "\n" .
               '‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–∞—è —Ü–µ–Ω–∞' . "\n\n" .
               '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏' . "\n" .
               '–ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞' . "\n" .
               '–ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞';
    }

    private function generateShortDescription($description, $name) {
        $short = mb_substr($description, 0, 120);
        $short = preg_replace('/[‚Ä¢‚úÖüåøüí°üå°Ô∏èüíß‚öóÔ∏èüí®üß™üìçüê†üèÜüöö]/u', '', $short);
        $short = preg_replace('/\n+/', ' ', $short);
        return trim($short) . '...';
    }

    public function suggestOptimalPrice($name, $category, $market_data = []) {
        $basePrice = $this->calculateBasePrice($name, $category);
        $optimalPrice = $basePrice;
        $discountPrice = $optimalPrice * 1.15;

        $optimalPrice = $this->roundToNiceNumber($optimalPrice);
        $discountPrice = $this->roundToNiceNumber($discountPrice);

        return [
            'price' => $optimalPrice,
            'old_price' => $discountPrice,
            'explanation' => $this->explainPricing($optimalPrice, $category, $name),
            'confidence' => $this->calculatePriceConfidence($category, $name)
        ];
    }

    private function calculateBasePrice($name, $category) {
        $basePrices = [
            '1' => 350,
            '2' => 200,
            '3' => 1500,
            '4' => 400
        ];

        $basePrice = $basePrices[$category] ?? 300;

        $name_lower = mb_strtolower($name);

        $priceModifiers = [
            '–ø—Ä–µ–º–∏—É–º' => 1.5,
            '—Ä–µ–¥–∫–∏–π' => 1.8,
            '–∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–π' => 2.0,
            '–∫—É–±–∞' => 2.5,
            '—ç–∫—Å–∫–ª—é–∑–∏–≤' => 1.7,
            '–ø—Ä–æ—Å—Ç–æ–π' => 0.8,
            '–æ–±—ã—á–Ω—ã–π' => 0.9
        ];

        foreach ($priceModifiers as $keyword => $modifier) {
            if (mb_strpos($name_lower, $keyword) !== false) {
                $basePrice *= $modifier;
                break;
            }
        }

        return $basePrice;
    }

    private function roundToNiceNumber($price) {
        if ($price < 100) {
            return round($price / 10) * 10;
        } elseif ($price < 1000) {
            return round($price / 50) * 50;
        } else {
            return round($price / 100) * 100;
        }
    }

    private function explainPricing($price, $category, $name) {
        return '–¶–µ–Ω–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.';
    }

    private function calculatePriceConfidence($category, $name) {
        return 0.85;
    }

    public function generateSEOData($name, $description, $category) {
        $keywords = $this->extractKeywords($name, $description, $category);

        $metaTitle = $this->generateMetaTitle($name, $keywords);
        $metaDescription = $this->generateMetaDescription($description, $keywords);
        $tags = $this->generateTags($name, $category, $keywords);

        return [
            'meta_title' => $metaTitle,
            'meta_description' => $metaDescription,
            'tags' => implode(', ', $tags),
            'seo_score' => $this->calculateSEOScore($metaTitle, $metaDescription, $tags),
            'recommendations' => $this->getSEORecommendations($metaTitle, $metaDescription, $tags)
        ];
    }

    private function extractKeywords($name, $description, $category) {
        $words = array_merge(
            explode(' ', mb_strtolower($name)),
            array_slice(explode(' ', mb_strtolower($description)), 0, 10)
        );

        return array_unique(array_filter($words, function($word) {
            return mb_strlen($word) > 3;
        }));
    }

    private function generateMetaTitle($name, $keywords) {
        $templates = [
            '{name} - –∫—É–ø–∏—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ | AquaWorld',
            '{name} | –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–∫–≤–∞—Ä–∏—É–º–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã',
            '–ö—É–ø–∏—Ç—å {name} –Ω–µ–¥–æ—Ä–æ–≥–æ | AquaWorld'
        ];

        $template = $templates[array_rand($templates)];
        $title = str_replace('{name}', $name, $template);

        if (mb_strlen($title) > 60) {
            $title = mb_substr($title, 0, 57) . '...';
        }

        return $title;
    }

    private function generateMetaDescription($description, $keywords) {
        $shortDesc = mb_substr($description, 0, 120);
        $shortDesc = preg_replace('/[‚Ä¢‚úÖüåøüí°üå°Ô∏èüíß‚öóÔ∏èüí®üß™üìçüê†üèÜüöö]/u', '', $shortDesc);
        $shortDesc = preg_replace('/\n+/', ' ', $shortDesc);
        $shortDesc = trim($shortDesc);

        $metaDesc = $shortDesc . '... –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞, –≥–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞, –ª—É—á—à–∏–µ —Ü–µ–Ω—ã';

        if (mb_strlen($metaDesc) > 160) {
            $metaDesc = mb_substr($metaDesc, 0, 157) . '...';
        }

        return $metaDesc;
    }

    private function generateTags($name, $category, $keywords) {
        $baseTags = explode(' ', mb_strtolower($name));
        $baseTags = array_filter($baseTags, function($tag) {
            return mb_strlen($tag) > 2;
        });

        $categoryTags = [
            '1' => ['—Ä–∞—Å—Ç–µ–Ω–∏—è', '–∞–∫–≤–∞—Ä–∏—É–º–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è', '–∑–µ–ª–µ–Ω—å', '—Ñ–ª–æ—Ä–∞'],
            '2' => ['—Ä—ã–±–∫–∏', '–∞–∫–≤–∞—Ä–∏—É–º–Ω—ã–µ —Ä—ã–±—ã', '–∂–∏–≤—ã–µ —Ä—ã–±—ã', '—Ñ–∞—É–Ω–∞'],
            '3' => ['–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', '—Ç–µ—Ö–Ω–∏–∫–∞', '—Ñ–∏–ª—å—Ç—Ä—ã', '–∞–ø–ø–∞—Ä–∞—Ç—É—Ä–∞'],
            '4' => ['–¥–µ–∫–æ—Ä', '–¥–µ–∫–æ—Ä–∞—Ü–∏–∏', '—É–∫—Ä–∞—à–µ–Ω–∏—è', '–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ']
        ];

        $tags = array_merge($baseTags, $categoryTags[$category] ?? []);

        $popularTags = ['–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ', '–Ω–µ–¥–æ—Ä–æ–≥–æ', '–±—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞', '–≥–∞—Ä–∞–Ω—Ç–∏—è', '–∞–∫–≤–∞—Å–∫–µ–π–ø'];
        $tags = array_merge($tags, array_slice($popularTags, 0, 3));

        $tags = array_unique($tags);
        return array_slice($tags, 0, 10);
    }

    public function calculateSEOScore($title, $description, $tags) {
        $score = 0;

        if (!empty($title) && mb_strlen($title) <= 60) $score += 30;
        if (!empty($description) && mb_strlen($description) <= 160) $score += 25;
        if (is_array($tags) && count($tags) >= 3) $score += 20;
        if (!empty($title) && !empty($description)) $score += 25;

        return $score;
    }

    private function getSEORecommendations($title, $description, $tags) {
        $recommendations = [];

        if (mb_strlen($title) > 60) {
            $recommendations[] = '–°–æ–∫—Ä–∞—Ç–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ 60 —Å–∏–º–≤–æ–ª–æ–≤';
        }

        if (mb_strlen($description) > 160) {
            $recommendations[] = '–°–æ–∫—Ä–∞—Ç–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ 160 —Å–∏–º–≤–æ–ª–æ–≤';
        }

        if (count($tags) < 5) {
            $recommendations[] = '–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ç–µ–≥–æ–≤';
        }

        return $recommendations;
    }

    public function analyzeProduct($productData) {
        $analysis = [
            'completeness' => $this->analyzeCompleteness($productData),
            'quality_score' => $this->calculateQualityScore($productData),
            'market_potential' => $this->analyzeMarketPotential($productData),
            'seo_optimization' => $this->analyzeSEOOptimization($productData),
            'recommendations' => []
        ];

        $analysis['recommendations'] = $this->generateRecommendations($analysis, $productData);
        return $analysis;
    }

    private function analyzeCompleteness($productData) {
        $required_fields = ['name', 'price', 'description', 'category_id'];
        $filled_fields = 0;

        foreach ($required_fields as $field) {
            if (!empty($productData[$field])) {
                $filled_fields++;
            }
        }

        return ($filled_fields / count($required_fields)) * 100;
    }

    private function calculateQualityScore($productData) {
        $score = 0;

        if (!empty($productData['name']) && mb_strlen($productData['name']) > 10) {
            $score += 25;
        }

        if (!empty($productData['description']) && mb_strlen($productData['description']) > 100) {
            $score += 30;
        }

        if (!empty($productData['price']) && $productData['price'] > 0) {
            $score += 20;
        }

        if (!empty($productData['main_image'])) {
            $score += 25;
        }

        return $score;
    }

    private function analyzeMarketPotential($productData) {
        return rand(70, 95);
    }

    private function analyzeSEOOptimization($productData) {
        $score = 0;

        if (!empty($productData['meta_title'])) $score += 30;
        if (!empty($productData['meta_description'])) $score += 30;
        if (!empty($productData['tags'])) $score += 40;

        return $score;
    }

    private function generateRecommendations($analysis, $productData) {
        $recommendations = [];

        if ($analysis['completeness'] < 100) {
            $recommendations[] = '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è';
        }

        if ($analysis['quality_score'] < 80) {
            $recommendations[] = '–£–ª—É—á—à–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞';
        }

        if ($analysis['seo_optimization'] < 70) {
            $recommendations[] = '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ SEO –¥–∞–Ω–Ω—ã–µ';
        }

        return $recommendations;
    }

    public function improveProduct($productData) {
        $improvements = [];

        if ($this->needsNameImprovement($productData)) {
            $improvements['name'] = $this->improveProductName($productData['name'], $productData['category_id']);
        }

        if ($this->needsDescriptionImprovement($productData)) {
            $improvements['description'] = $this->improveDescription($productData['description'], $productData);
        }

        if ($this->needsPriceOptimization($productData)) {
            $priceData = $this->suggestOptimalPrice($productData['name'], $productData['category_id']);
            $improvements['price'] = $priceData['price'];
            $improvements['old_price'] = $priceData['old_price'];
        }

        $seoData = $this->generateSEOData($productData['name'], $productData['description'], $productData['category_id']);
        $improvements['meta_title'] = $seoData['meta_title'];
        $improvements['meta_description'] = $seoData['meta_description'];
        $improvements['tags'] = $seoData['tags'];

        return $improvements;
    }

    private function needsNameImprovement($productData) {
        return empty($productData['name']) || mb_strlen($productData['name']) < 10;
    }

    private function needsDescriptionImprovement($productData) {
        return empty($productData['description']) || mb_strlen($productData['description']) < 100;
    }

    private function needsPriceOptimization($productData) {
        return empty($productData['price']) || $productData['price'] <= 0;
    }

    private function improveProductName($name, $category) {
        if (empty($name)) {
            return $this->generateProductName($category);
        }
        return $name . ' - –ø—Ä–µ–º–∏—É–º –∫–∞—á–µ—Å—Ç–≤–æ';
    }

    private function improveDescription($description, $productData) {
        if (empty($description)) {
            return $this->generateProductDescription($productData['name'], $productData['category_id'])['description'];
        }
        return $description;
    }

    public function getAIStats() {
        return [
            'total_generations' => count($this->userActions),
            'successful_generations' => count(array_filter($this->userActions, function($a) { return $a['success']; })),
            'learning_entries' => count($this->learningData['successful_generations']),
            'knowledge_base_size' => $this->calculateKnowledgeBaseSize(),
            'last_learning' => !empty($this->userActions) ? max(array_column($this->userActions, 'timestamp')) : 0
        ];
    }

    private function calculateKnowledgeBaseSize() {
        $size = 0;
        foreach ($this->knowledgeBase as $category) {
            foreach ($category as $subcategory) {
                $size += count($subcategory);
            }
        }
        return $size;
    }

    public function handleAjaxRequest($action, $data) {
        try {
            switch ($action) {
                case 'generate_all':
                    return $this->generateAllProductData($data);

                case 'generate_name':
                    return ['success' => true, 'name' => $this->generateProductName($data['category'], explode(' ', $data['keywords'] ?? ''))];

                case 'generate_description':
                    $result = $this->generateProductDescription($data['product_name'], $data['category']);
                    return [
                        'success' => true,
                        'description' => $result['description'],
                        'short_description' => $result['short_description']
                    ];

                case 'suggest_price':
                    $priceData = $this->suggestOptimalPrice($data['product_name'], $data['category']);
                    return [
                        'success' => true,
                        'price' => $priceData['price'],
                        'old_price' => $priceData['old_price'],
                        'explanation' => $priceData['explanation'],
                        'confidence' => $priceData['confidence']
                    ];

                case 'generate_tags':
                    $seoData = $this->generateSEOData($data['product_name'], $data['description'] ?? '', $data['category']);
                    return ['success' => true, 'tags' => $seoData['tags']];

                case 'optimize_seo':
                    $seoData = $this->generateSEOData($data['product_name'], $data['description'] ?? '', $data['category']);
                    return [
                        'success' => true,
                        'meta_title' => $seoData['meta_title'],
                        'meta_description' => $seoData['meta_description'],
                        'tags' => $seoData['tags'],
                        'seo_score' => $seoData['seo_score'],
                        'recommendations' => $seoData['recommendations']
                    ];

                case 'analyze_product':
                    $analysis = $this->analyzeProduct($data);
                    return ['success' => true, 'analysis' => $analysis];

                case 'improve_product':
                    $improvements = $this->improveProduct($data);
                    return ['success' => true, 'improvements' => $improvements];

                default:
                    return ['success' => false, 'message' => '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'];
            }
        } catch (Exception $e) {
            return ['success' => false, 'message' => '–û—à–∏–±–∫–∞ –ò–ò: ' . $e->getMessage()];
        }
    }

    private function generateAllProductData($data) {
        $name = $data['product_name'] ?? '';
        $category = $data['category'] ?? '';

        if (empty($name)) {
            return ['success' => false, 'message' => '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'];
        }

        $description = $this->generateProductDescription($name, $category);
        $price = $this->suggestOptimalPrice($name, $category);
        $seo = $this->generateSEOData($name, $description['description'], $category);

        return [
            'success' => true,
            'name' => $this->generateProductName($category, explode(' ', $name)),
            'description' => $description['description'],
            'short_description' => $description['short_description'],
            'price' => $price['price'],
            'old_price' => $price['old_price'],
            'tags' => $seo['tags'],
            'meta_title' => $seo['meta_title'],
            'meta_description' => $seo['meta_description'],
            'message' => '–ò–ò —Å–æ–∑–¥–∞–ª –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–≤–∞—Ä–∞!'
        ];
    }

    // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    public function sortByRelevance($products, $search) { return $products; }
    public function getProductRecommendations($product) { return []; }
    public function findRelatedProducts($product) { return []; }
    public function selectFeaturedProducts($products, $limit) { 
        shuffle($products);
        return array_slice($products, 0, $limit);
    }
    public function getCategoryInsights($categoryId) { return []; }
    public function analyzeCategoryPerformance($categoryId, $count, $totalValue) { return []; }
    public function getCategoryRecommendations($categoryId) { return []; }
    public function getCartRecommendations($items) { return []; }
    public function findSimilarProducts($item) { return []; }
    public function analyzeSentiment($comment) { return 'neutral'; }
    public function extractReviewKeywords($comment) { return explode(' ', mb_substr($comment, 0, 50)); }
    public function analyzeRatingTrend($reviews) { return 'stable'; }
    public function analyzeProductRating($productId, $average, $validRatings) { return []; }
    public function analyzeReviewBeforeSave($reviewData) {
        return [
            'sentiment' => 'neutral',
            'spam_score' => 0.1,
            'quality_score' => 0.8
        ];
    }
    public function analyzeOrder($order) { return []; }
    public function getOrderRecommendations($order) { return []; }
    public function generateDashboardInsights($stats, $products, $orders) { return []; }
    public function getDashboardRecommendations($stats) {
        return [
            [
                'title' => '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂',
                'description' => '–ò–ò —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç —É–ª—É—á—à–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤',
                'icon' => 'fas fa-chart-up',
                'priority' => '–í—ã—Å–æ–∫–∏–π',
                'type' => 'important'
            ]
        ];
    }
    public function analyzeTrends($orders, $products) {
        return [
            [
                'title' => '–ü—Ä–æ–¥–∞–∂–∏ —Ä–∞—Å—Ç–µ–Ω–∏–π',
                'description' => '–†–æ—Å—Ç –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ –∞–∫–≤–∞—Ä–∏—É–º–Ω—ã–º —Ä–∞—Å—Ç–µ–Ω–∏—è–º',
                'trend' => 'up',
                'change' => 15,
                'forecast' => '–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π'
            ]
        ];
    }
    public function exportLearningData() {
        return [
            'knowledge_base' => $this->knowledgeBase,
            'learning_data' => $this->learningData,
            'user_actions' => array_slice($this->userActions, -100),
            'export_timestamp' => time()
        ];
    }
    public function importLearningData($data) {
        if (isset($data['learning_data'])) {
            $this->learningData = array_merge($this->learningData, $data['learning_data']);
        }
        if (isset($data['user_actions'])) {
            $this->userActions = array_merge($this->userActions, $data['user_actions']);
        }
        $this->updateLearningPatterns();
        return true;
    }
    public function analyzeOverallPerformance($products, $orders, $reviews) {
        return [
            'efficiency_score' => rand(75, 95),
            'accuracy_score' => rand(80, 96),
            'quality_score' => rand(85, 98),
            'learning_speed' => rand(70, 88),
            'recommendation_accuracy' => rand(82, 94),
            'overall_rating' => rand(78, 92) / 10
        ];
    }
}

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ AJAX –∑–∞–ø—Ä–æ—Å–æ–≤ –ë–ï–ó HTML –í–´–í–û–î–ê
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['ai_action'])) {
    // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –≤—ã–≤–æ–¥–∞
    ob_clean();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    header('Content-Type: application/json; charset=utf-8');
    header('Cache-Control: no-cache, must-revalidate');
    header('Expires: Mon, 26 Jul 1997 05:00:00 GMT');

    try {
        $ai = new AquaAI();
        $result = $ai->handleAjaxRequest($_POST['ai_action'], $_POST);

        // –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
        if (isset($result['success']) && $result['success']) {
            $ai->learnFromUserAction($_POST['ai_action'], $_POST, true);
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∏—Å—Ç—ã–π JSON
        echo json_encode($result, JSON_UNESCAPED_UNICODE);

    } catch (Exception $e) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
        echo json_encode([
            'success' => false,
            'message' => '–û—à–∏–±–∫–∞ –ò–ò: ' . $e->getMessage()
        ], JSON_UNESCAPED_UNICODE);
    }

    exit;
}

// –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω
ob_end_clean();
?>
