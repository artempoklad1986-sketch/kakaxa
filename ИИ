<?php
// ============================================================================
// ü§ñ –ú–ï–ì–ê-–£–ú–ù–´–ô –ò–ò –ü–û–ú–û–©–ù–ò–ö v3.0 - –≠–ö–°–ü–ï–†–¢ –ü–û –ê–ö–í–ê–†–ò–£–ú–ò–°–¢–ò–ö–ï
// –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –ò–ò —Å –≥–ª—É–±–æ–∫–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –ø–æ –∞–∫–≤–∞—Ä–∏—É–º–∏—Å—Ç–∏–∫–µ –∏ —Å–æ–∑–¥–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–æ–≤
// ============================================================================

class AquaAI {

    private $knowledgeBase;
    private $learningData;
    private $userActions;
    private $dataPath;
    private $expertMode = true;

    public function __construct() {
        $this->dataPath = dirname(__DIR__) . '/data/';
        if (!is_dir($this->dataPath)) {
            mkdir($this->dataPath, 0755, true);
        }

        $this->initializeMegaKnowledgeBase();
        $this->loadLearningData();
    }

    // ============================================================================
    // –ú–ï–ì–ê –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô –ü–û –ê–ö–í–ê–†–ò–£–ú–ò–°–¢–ò–ö–ï
    // ============================================================================

    private function initializeMegaKnowledgeBase() {
        $this->knowledgeBase = [
            'plants' => [
                'easy_care' => [
                    'anubias_nana' => [
                        'scientific_name' => 'Anubias barteri var. nana',
                        'common_names' => ['–ê–Ω—É–±–∏–∞—Å –Ω–∞–Ω–∞', '–ö–∞—Ä–ª–∏–∫–æ–≤—ã–π –∞–Ω—É–±–∏–∞—Å', '–ê–Ω—É–±–∏–∞—Å –ë–∞—Ä—Ç–µ—Ä–∞ –Ω–∞–Ω–∞'],
                        'family' => 'Araceae',
                        'origin' => '–ó–∞–ø–∞–¥–Ω–∞—è –ê—Ñ—Ä–∏–∫–∞ (–ö–∞–º–µ—Ä—É–Ω, –≠–∫–≤–∞—Ç–æ—Ä–∏–∞–ª—å–Ω–∞—è –ì–≤–∏–Ω–µ—è)',
                        'description' => '–ù–µ–ø—Ä–∏—Ö–æ—Ç–ª–∏–≤–æ–µ –º–µ–¥–ª–µ–Ω–Ω–æ—Ä–∞—Å—Ç—É—â–µ–µ —ç–ø–∏—Ñ–∏—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ —Å –∫–æ–∂–∏—Å—Ç—ã–º–∏ —Ç–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–º–∏ –ª–∏—Å—Ç—å—è–º–∏. –ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –∞–∫–≤–∞—Ä–∏—É–º–∏—Å—Ç–æ–≤ –±–ª–∞–≥–æ–¥–∞—Ä—è –≤—ã—Å–æ–∫–æ–π –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è.',
                        'care_requirements' => [
                            'lighting' => '–ù–∏–∑–∫–æ–µ-—Å—Ä–µ–¥–Ω–µ–µ (20-40 –ª–º/–ª)',
                            'temperature' => '22-28¬∞C (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ 24-26¬∞C)',
                            'ph' => '6.0-8.0 (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ 6.5-7.5)',
                            'hardness' => '2-15 dGH (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ 5-12 dGH)',
                            'co2' => '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –Ω–æ —É—Å–∫–æ—Ä—è–µ—Ç —Ä–æ—Å—Ç',
                            'fertilization' => '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è, –∂–∏–¥–∫–∏–µ —É–¥–æ–±—Ä–µ–Ω–∏—è 1-2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é',
                            'substrate' => '–õ—é–±–æ–π, –≤—ã—Å–∞–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–æ—Ä—è–≥–∏ –∏ –∫–∞–º–Ω–∏'
                        ],
                        'placement' => '–ü–µ—Ä–µ–¥–Ω–∏–π –∏ —Å—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω, –Ω–∞ –∫–æ—Ä—è–≥–∞—Ö, –∫–∞–º–Ω—è—Ö, –¥–µ–∫–æ—Ä–∞—Ü–∏—è—Ö',
                        'growth_rate' => '–û—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω—ã–π (1-2 –ª–∏—Å—Ç–∞ –≤ –º–µ—Å—è—Ü)',
                        'size' => '–í—ã—Å–æ—Ç–∞: 5-15 —Å–º, —à–∏—Ä–∏–Ω–∞: 8-15 —Å–º',
                        'compatibility' => '–°–æ–≤–º–µ—Å—Ç–∏–º —Å–æ –≤—Å–µ–º–∏ –≤–∏–¥–∞–º–∏ —Ä—ã–±, –≤–∫–ª—é—á–∞—è —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—è–¥–Ω—ã—Ö –∑–æ–ª–æ—Ç—ã—Ö —Ä—ã–±–æ–∫ –∏ —Ü–∏—Ö–ª–∏–¥',
                        'propagation' => '–î–µ–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–∏—â–∞, –æ—Ç—Ä–æ—Å—Ç–∫–∞–º–∏',
                        'special_features' => [
                            '–¢–æ–∫—Å–∏—á–µ–Ω –ø—Ä–∏ –ø–æ–µ–¥–∞–Ω–∏–∏ –Ω–∞–∑–µ–º–Ω—ã–º–∏ –∂–∏–≤–æ—Ç–Ω—ã–º–∏',
                            '–ú–æ–∂–µ—Ç —Ä–∞—Å—Ç–∏ –∫–∞–∫ –≤ –≤–æ–¥–µ, —Ç–∞–∫ –∏ –≤ –ø–∞–ª—é–¥–∞—Ä–∏—É–º–µ',
                            '–¶–≤–µ—Ç–µ—Ç –ø–æ–¥ –≤–æ–¥–æ–π –±–µ–ª—ã–º–∏ —Å–æ—Ü–≤–µ—Ç–∏—è–º–∏',
                            '–ö–æ—Ä–Ω–µ–≤–∏—â–µ –Ω–µ–ª—å–∑—è –∑–∞–∫–∞–ø—ã–≤–∞—Ç—å –≤ –≥—Ä—É–Ω—Ç'
                        ],
                        'benefits' => [
                            '–ü–æ–≥–ª–æ—â–∞–µ—Ç –Ω–∏—Ç—Ä–∞—Ç—ã –∏ —Ñ–æ—Å—Ñ–∞—Ç—ã',
                            '–°–æ–∑–¥–∞–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É–∫—Ä—ã—Ç–∏—è –¥–ª—è –º–∞–ª—å–∫–æ–≤',
                            '–ù–µ–ø—Ä–∏—Ö–æ—Ç–ª–∏–≤ –∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –≤–æ–¥—ã',
                            '–ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç - —Ä–µ–¥–∫–æ —Ç—Ä–µ–±—É–µ—Ç –æ–±—Ä–µ–∑–∫–∏',
                            '–£—Å—Ç–æ–π—á–∏–≤ –∫ –æ–±—Ä–∞—Å—Ç–∞–Ω–∏—é –≤–æ–¥–æ—Ä–æ—Å–ª—è–º–∏'
                        ],
                        'common_problems' => [
                            '–ü–æ–∂–µ–ª—Ç–µ–Ω–∏–µ –ª–∏—Å—Ç—å–µ–≤ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –ø–∏—Ç–∞–Ω–∏—è',
                            '–ì–Ω–∏–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–∏—â–∞ –ø—Ä–∏ –∑–∞–≥–ª—É–±–ª–µ–Ω–∏–∏ –≤ –≥—Ä—É–Ω—Ç',
                            '–ú–µ–¥–ª–µ–Ω–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Å–∞–¥–∫–∏'
                        ],
                        'price_range' => [300, 800],
                        'market_demand' => '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π',
                        'difficulty_level' => '–û—á–µ–Ω—å –ª–µ–≥–∫–∏–π',
                        'tags' => ['–Ω–µ–ø—Ä–∏—Ö–æ—Ç–ª–∏–≤—ã–µ', '–º–µ–¥–ª–µ–Ω–Ω–æ—Ä–∞—Å—Ç—É—â–∏–µ', '—Ç–µ–Ω–µ–ª—é–±–∏–≤—ã–µ', '–¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö', '—ç–ø–∏—Ñ–∏—Ç', '–∞—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ']
                    ],
                    'java_moss' => [
                        'scientific_name' => 'Taxiphyllum barbieri',
                        'common_names' => ['–Ø–≤–∞–Ω—Å–∫–∏–π –º–æ—Ö', 'Java moss', '–î—É–±–æ–∫ —è–≤–∞–Ω—Å–∫–∏–π'],
                        'family' => 'Hypnaceae',
                        'origin' => '–Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω–∞—è –ê–∑–∏—è (–Ø–≤–∞, –ú–∞–ª–∞–π–∑–∏—è, –§–∏–ª–∏–ø–ø–∏–Ω—ã)',
                        'description' => '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –±—ã—Å—Ç—Ä–æ—Ä–∞—Å—Ç—É—â–∏–π –º–æ—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ª–∞–Ω–¥—à–∞—Ñ—Ç–∞. –û–±—Ä–∞–∑—É–µ—Ç –ø–ª–æ—Ç–Ω—ã–µ –∑–∞—Ä–æ—Å–ª–∏, –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–µ—Ä–µ—Å—Ç–æ–≤–∏–∫–æ–≤ –∏ –¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.',
                        'care_requirements' => [
                            'lighting' => '–ù–∏–∑–∫–æ–µ-–≤—ã—Å–æ–∫–æ–µ (15-60 –ª–º/–ª)',
                            'temperature' => '15-30¬∞C (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ 20-26¬∞C)',
                            'ph' => '5.0-9.0 (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ 6.0-8.0)',
                            'hardness' => '2-25 dGH',
                            'co2' => '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è',
                            'fertilization' => '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –Ω–æ –æ—Ç–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —É–¥–æ–±—Ä–µ–Ω–∏—è'
                        ],
                        'placement' => '–õ—é–±–æ–µ –º–µ—Å—Ç–æ, –∫–æ—Ä—è–≥–∏, –∫–∞–º–Ω–∏, —Å–µ—Ç–∫–∏, —Å—É–±—Å—Ç—Ä–∞—Ç',
                        'growth_rate' => '–ë—ã—Å—Ç—Ä—ã–π (—É–¥–≤–∞–∏–≤–∞–µ—Ç—Å—è –∑–∞ 2-4 –Ω–µ–¥–µ–ª–∏)',
                        'size' => '–í—ã—Å–æ—Ç–∞: 3-10 —Å–º, –º–æ–∂–µ—Ç –ø–æ–∫—Ä—ã—Ç—å –≤—Å—é –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å',
                        'compatibility' => '–°–æ–≤–º–µ—Å—Ç–∏–º —Å–æ –≤—Å–µ–º–∏ –≤–∏–¥–∞–º–∏ —Ä—ã–±',
                        'special_features' => [
                            '–ú–æ–∂–µ—Ç —Ä–∞—Å—Ç–∏ –≤ —Å–æ–ª–æ–Ω–æ–≤–∞—Ç–æ–π –≤–æ–¥–µ',
                            '–í—ã–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –≤—ã—Å—ã—Ö–∞–Ω–∏–µ',
                            '–û—á–∏—â–∞–µ—Ç –≤–æ–¥—É –æ—Ç –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–π',
                            '–ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –ø–ª–∞–≤–∞—é—â–µ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ'
                        ],
                        'benefits' => [
                            '–ò–¥–µ–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –Ω–µ—Ä–µ—Å—Ç–∞ —Ä—ã–±',
                            '–£–∫—Ä—ã—Ç–∏–µ –¥–ª—è –º–∞–ª—å–∫–æ–≤ –∏ –∫—Ä–µ–≤–µ—Ç–æ–∫',
                            '–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –±–∏–æ—Ñ–∏–ª—å—Ç—Ä',
                            '–ù–∞—Å—ã—â–∞–µ—Ç –≤–æ–¥—É –∫–∏—Å–ª–æ—Ä–æ–¥–æ–º',
                            '–ü–æ–≥–ª–æ—â–∞–µ—Ç –∞–º–º–∏–∞–∫ –∏ –Ω–∏—Ç—Ä–∏—Ç—ã'
                        ],
                        'price_range' => [150, 400],
                        'market_demand' => '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π',
                        'difficulty_level' => '–û—á–µ–Ω—å –ª–µ–≥–∫–∏–π',
                        'tags' => ['–º—Ö–∏', '–±—ã—Å—Ç—Ä–æ—Ä–∞—Å—Ç—É—â–∏–µ', '—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ', '–¥–ª—è –Ω–µ—Ä–µ—Å—Ç–∞', '–∞–∑–∏–∞—Ç—Å–∫–∏–µ']
                    ],
                    'vallisneria_spiralis' => [
                        'scientific_name' => 'Vallisneria spiralis',
                        'common_names' => ['–í–∞–ª–ª–∏—Å–Ω–µ—Ä–∏—è —Å–ø–∏—Ä–∞–ª—å–Ω–∞—è', 'Spiral val', '–®—Ç–æ–ø–æ—Ä–Ω–∏–∫'],
                        'family' => 'Hydrocharitaceae',
                        'origin' => '–Æ–∂–Ω–∞—è –ï–≤—Ä–æ–ø–∞, –ê–∑–∏—è, –ê–≤—Å—Ç—Ä–∞–ª–∏—è',
                        'description' => '–î–ª–∏–Ω–Ω–æ—Å—Ç–µ–±–µ–ª—å–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ —Å –ª–µ–Ω—Ç–æ–≤–∏–¥–Ω—ã–º–∏ –ª–∏—Å—Ç—å—è–º–∏, –æ–±—Ä–∞–∑—É–µ—Ç –≥—É—Å—Ç—ã–µ –∑–∞—Ä–æ—Å–ª–∏ –Ω–∞ –∑–∞–¥–Ω–µ–º –ø–ª–∞–Ω–µ –∞–∫–≤–∞—Ä–∏—É–º–∞. –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏—Ä–æ–¥–Ω–æ–≥–æ —Ñ–æ–Ω–∞.',
                        'care_requirements' => [
                            'lighting' => '–°—Ä–µ–¥–Ω–µ–µ-–≤—ã—Å–æ–∫–æ–µ (30-50 –ª–º/–ª)',
                            'temperature' => '20-28¬∞C (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ 22-26¬∞C)',
                            'ph' => '6.5-8.5 (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ 7.0-8.0)',
                            'hardness' => '8-20 dGH (–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –∂–µ—Å—Ç–∫—É—é –≤–æ–¥—É)',
                            'co2' => '–ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ',
                            'fertilization' => '–ö–æ—Ä–Ω–µ–≤—ã–µ –ø–æ–¥–∫–æ—Ä–º–∫–∏'
                        ],
                        'placement' => '–ó–∞–¥–Ω–∏–π –ø–ª–∞–Ω, –æ–±—Ä–∞–∑—É–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Å—Ç–µ–Ω—É',
                        'growth_rate' => '–ë—ã—Å—Ç—Ä—ã–π (–º–æ–∂–µ—Ç –≤—ã—Ä–∞—Å—Ç–∏ –Ω–∞ 5-10 —Å–º –≤ –Ω–µ–¥–µ–ª—é)',
                        'size' => '–í—ã—Å–æ—Ç–∞: 30-60 —Å–º, —à–∏—Ä–∏–Ω–∞: 15-25 —Å–º',
                        'benefits' => [
                            '–ë—ã—Å—Ç—Ä–æ –ø–æ–≥–ª–æ—â–∞–µ—Ç –Ω–∏—Ç—Ä–∞—Ç—ã',
                            '–°–æ–∑–¥–∞–µ—Ç —É–∫—Ä—ã—Ç–∏—è –¥–ª—è —Ä—ã–±',
                            '–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ñ–æ–Ω –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞',
                            '–í—ã–¥–µ–ª—è–µ—Ç –º–Ω–æ–≥–æ –∫–∏—Å–ª–æ—Ä–æ–¥–∞'
                        ],
                        'price_range' => [200, 500],
                        'tags' => ['–¥–ª–∏–Ω–Ω–æ—Å—Ç–µ–±–µ–ª—å–Ω—ã–µ', '–±—ã—Å—Ç—Ä–æ—Ä–∞—Å—Ç—É—â–∏–µ', '–∑–∞–¥–Ω–∏–π –ø–ª–∞–Ω', '–æ—á–∏—â–∞—é—â–∏–µ']
                    ]
                ],
                'medium_care' => [
                    'rotala_rotundifolia' => [
                        'scientific_name' => 'Rotala rotundifolia',
                        'common_names' => ['–†–æ—Ç–∞–ª–∞ –∫—Ä—É–≥–ª–æ–ª–∏—Å—Ç–Ω–∞—è', 'Round leaf rotala', '–ò–Ω–¥–∏–π—Å–∫–∞—è –∑–≤–µ–∑–¥–æ—á–∫–∞'],
                        'family' => 'Lythraceae',
                        'origin' => '–Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω–∞—è –ê–∑–∏—è (–ò–Ω–¥–∏—è, –®—Ä–∏-–õ–∞–Ω–∫–∞)',
                        'description' => '–ö—Ä–∞—Å–∏–≤–æ–µ —Å—Ç–µ–±–ª–µ–≤–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ —Å –æ–∫—Ä—É–≥–ª—ã–º–∏ –ª–∏—Å—Ç—å—è–º–∏, –º–µ–Ω—è—é—â–∏–º–∏ —Ü–≤–µ—Ç –æ—Ç –∑–µ–ª–µ–Ω–æ–≥–æ –¥–æ —Ä–æ–∑–æ–≤–æ-–∫—Ä–∞—Å–Ω–æ–≥–æ –ø—Ä–∏ —è—Ä–∫–æ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏.',
                        'care_requirements' => [
                            'lighting' => '–°—Ä–µ–¥–Ω–µ–µ-–≤—ã—Å–æ–∫–æ–µ (40-60 –ª–º/–ª)',
                            'temperature' => '20-28¬∞C',
                            'ph' => '5.0-7.5',
                            'hardness' => '2-15 dGH',
                            'co2' => '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è',
                            'fertilization' => '–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –º–∞–∫—Ä–æ –∏ –º–∏–∫—Ä–æ —É–¥–æ–±—Ä–µ–Ω–∏—è'
                        ],
                        'special_features' => [
                            '–ú–µ–Ω—è–µ—Ç —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Å–≤–µ—â–µ–Ω–∏—è',
                            '–ú–æ–∂–µ—Ç —Ä–∞—Å—Ç–∏ –∫–∞–∫ –ø–æ–≥—Ä—É–∂–µ–Ω–Ω–æ–π, —Ç–∞–∫ –∏ –Ω–∞–¥–≤–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–æ–π',
                            '–ë—ã—Å—Ç—Ä–æ —Ä–∞–∑–º–Ω–æ–∂–∞–µ—Ç—Å—è —á–µ—Ä–µ–Ω–∫–æ–≤–∞–Ω–∏–µ–º'
                        ],
                        'price_range' => [300, 700],
                        'difficulty_level' => '–°—Ä–µ–¥–Ω–∏–π',
                        'tags' => ['—Å—Ç–µ–±–ª–µ–≤—ã–µ', '—Ü–≤–µ—Ç–Ω—ã–µ', '—Å—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω', '–∞–∑–∏–∞—Ç—Å–∫–∏–µ']
                    ]
                ]
            ],

            'fish' => [
                'peaceful_community' => [
                    'neon_tetra' => [
                        'scientific_name' => 'Paracheirodon innesi',
                        'common_names' => ['–ù–µ–æ–Ω –≥–æ–ª—É–±–æ–π', '–ù–µ–æ–Ω –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–π', 'Neon tetra'],
                        'family' => 'Characidae',
                        'origin' => '–Æ–∂–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞ (–ê–º–∞–∑–æ–Ω–∫–∞, –ö–æ–ª—É–º–±–∏—è, –ü–µ—Ä—É, –ë—Ä–∞–∑–∏–ª–∏—è)',
                        'description' => '–Ø—Ä–∫–∞—è —Å—Ç–∞–π–Ω–∞—è —Ä—ã–±–∫–∞ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ–π –Ω–µ–æ–Ω–æ–≤–æ–π –ø–æ–ª–æ—Å–æ–π. –û–¥–Ω–∞ –∏–∑ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–∫–≤–∞—Ä–∏—É–º–Ω—ã—Ö —Ä—ã–± –±–ª–∞–≥–æ–¥–∞—Ä—è —Å–≤–æ–µ–π –∫—Ä–∞—Å–æ—Ç–µ –∏ –º–∏—Ä–Ω–æ–º—É –Ω—Ä–∞–≤—É.',
                        'care_requirements' => [
                            'temperature' => '20-26¬∞C (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ 22-24¬∞C)',
                            'ph' => '5.0-7.0 (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ 6.0-6.8)',
                            'hardness' => '1-10 dGH (–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –º—è–≥–∫—É—é –≤–æ–¥—É)',
                            'tank_size' => '–û—Ç 40 –ª–∏—Ç—Ä–æ–≤ (–º–∏–Ω–∏–º—É–º –¥–ª—è —Å—Ç–∞–π–∫–∏)',
                            'group_size' => '–û—Ç 6-8 –æ—Å–æ–±–µ–π (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ 10-15)',
                            'filtration' => '–•–æ—Ä–æ—à–∞—è, –Ω–æ –±–µ–∑ —Å–∏–ª—å–Ω–æ–≥–æ —Ç–µ—á–µ–Ω–∏—è',
                            'lighting' => '–ü—Ä–∏–≥–ª—É—à–µ–Ω–Ω–æ–µ, —Ä–∞—Å—Å–µ—è–Ω–Ω–æ–µ'
                        ],
                        'physical_characteristics' => [
                            'size' => '3-4 —Å–º',
                            'lifespan' => '5-8 –ª–µ—Ç –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —É—Ö–æ–¥–µ',
                            'coloration' => '–Ø—Ä–∫–æ-—Å–∏–Ω—è—è –ø–æ–ª–æ—Å–∞ –ø–æ —Ç–µ–ª—É, –∫—Ä–∞—Å–Ω—ã–µ –≥–ª–∞–∑–∞',
                            'sexual_dimorphism' => '–°–∞–º–∫–∏ –∫—Ä—É–ø–Ω–µ–µ –∏ –ø–æ–ª–Ω–µ–µ, —Å–∞–º—Ü—ã —è—Ä—á–µ'
                        ],
                        'behavior' => [
                            'temperament' => '–ú–∏—Ä–Ω—ã–π, —Å—Ç–∞–π–Ω—ã–π',
                            'activity_level' => '–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Å—Ä–µ–¥–Ω–∏—Ö —Å–ª–æ—è—Ö –≤–æ–¥—ã',
                            'compatibility' => '–û—Ç–ª–∏—á–Ω–æ —É–∂–∏–≤–∞–µ—Ç—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –º–∏—Ä–Ω—ã–º–∏ —Ä—ã–±–∞–º–∏',
                            'schooling' => '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤ —Å—Ç–∞–π–∫–µ'
                        ],
                        'feeding' => [
                            'diet_type' => '–í—Å–µ—è–¥–Ω—ã–µ',
                            'food_size' => '–ú–µ–ª–∫–∏–π –∫–æ—Ä–º (–¥–æ 1 –º–º)',
                            'feeding_frequency' => '2-3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –ø–æ—Ä—Ü–∏—è–º–∏',
                            'recommended_foods' => [
                                '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ö–ª–æ–ø—å—è –¥–ª—è —Ç—Ä–æ–ø–∏—á–µ—Å–∫–∏—Ö —Ä—ã–±',
                                '–ú–∏–∫—Ä–æ-–≥—Ä–∞–Ω—É–ª—ã',
                                '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π –º–æ—Ç—ã–ª—å (–º–µ–ª–∫–∏–π)',
                                '–ê—Ä—Ç–µ–º–∏—è',
                                '–î–∞—Ñ–Ω–∏—è',
                                '–†–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–±–∞–≤–∫–∏'
                            ]
                        ],
                        'breeding' => [
                            'difficulty' => '–°–ª–æ–∂–Ω–æ–µ (—Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π)',
                            'water_requirements' => '–û—á–µ–Ω—å –º—è–≥–∫–∞—è –≤–æ–¥–∞ (1-4 dGH), pH 5.0-6.5',
                            'temperature' => '24-26¬∞C',
                            'spawning_behavior' => '–†–∞–∑–±—Ä–∞—Å—ã–≤–∞—é—Ç –∏–∫—Ä—É –≤ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö',
                            'egg_count' => '60-130 –∏–∫—Ä–∏–Ω–æ–∫',
                            'incubation_period' => '24-36 —á–∞—Å–æ–≤',
                            'fry_care' => '–¢—Ä–µ–±—É—é—Ç –∏–Ω—Ñ—É–∑–æ—Ä–∏–π –∏ –Ω–∞—É–ø–ª–∏–∏ –∞—Ä—Ç–µ–º–∏–∏'
                        ],
                        'tank_setup' => [
                            'substrate' => '–¢–µ–º–Ω—ã–π –≥—Ä—É–Ω—Ç (–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ—Ç –æ–∫—Ä–∞—Å–∫—É)',
                            'plants' => '–ì—É—Å—Ç–∞—è —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Å–æ–∑–¥–∞—é—â–∞—è —Ç–µ–Ω—å',
                            'decoration' => '–ö–æ—Ä—è–≥–∏, –ø–µ—â–µ—Ä—ã –¥–ª—è —É–∫—Ä—ã—Ç–∏–π',
                            'water_flow' => '–°–ª–∞–±–æ–µ —Ç–µ—á–µ–Ω–∏–µ',
                            'tankmates' => [
                                '–û—Ç–ª–∏—á–Ω—ã–µ —Å–æ—Å–µ–¥–∏' => ['–ö–∞—Ä–¥–∏–Ω–∞–ª', '–î–∞–Ω–∏–æ —Ä–µ—Ä–∏–æ', '–†–∞—Å–±–æ—Ä—ã', '–ö–æ—Ä–∏–¥–æ—Ä–∞—Å—ã', '–ì—É–ø–ø–∏'],
                                '–•–æ—Ä–æ—à–∏–µ —Å–æ—Å–µ–¥–∏' => ['–°–∫–∞–ª—è—Ä–∏–∏ (–º–æ–ª–æ–¥—ã–µ)', '–ê–Ω—Ü–∏—Å—Ç—Ä—É—Å—ã', '–ö—Ä–µ–≤–µ—Ç–∫–∏'],
                                '–ü–ª–æ—Ö–∏–µ —Å–æ—Å–µ–¥–∏' => ['–ö—Ä—É–ø–Ω—ã–µ —Ü–∏—Ö–ª–∏–¥—ã', '–ë–∞—Ä–±—É—Å—ã (–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ)', '–ü–µ—Ç—É—à–∫–∏']
                            ]
                        ],
                        'diseases' => [
                            'common_diseases' => ['–ò—Ö—Ç–∏–æ—Ñ—Ç–∏—Ä–∏–æ–∑', '–ü–ª–∞–≤–Ω–∏–∫–æ–≤–∞—è –≥–Ω–∏–ª—å', '–ù–µ–æ–Ω–æ–≤–∞—è –±–æ–ª–µ–∑–Ω—å'],
                            'prevention' => '–°—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–æ–¥—ã, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ—Ä–º, –∫–∞—Ä–∞–Ω—Ç–∏–Ω –Ω–æ–≤—ã—Ö —Ä—ã–±'
                        ],
                        'price_range' => [50, 150],
                        'market_demand' => '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π',
                        'difficulty_level' => '–õ–µ–≥–∫–∏–π –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –∞–∫–≤–∞—Ä–∏—É–º–∏—Å—Ç–æ–≤',
                        'tags' => ['—Å—Ç–∞–π–Ω—ã–µ', '–º–∏—Ä–Ω—ã–µ', '—è—Ä–∫–∏–µ', '—Ö–∞—Ä–∞—Ü–∏–Ω–∫–∏', '—é–∂–Ω–æ–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ', '–Ω–∞–Ω–æ-—Ä—ã–±–∫–∏']
                    ],

                    'corydoras_paleatus' => [
                        'scientific_name' => 'Corydoras paleatus',
                        'common_names' => ['–ö–æ—Ä–∏–¥–æ—Ä–∞—Å –∫—Ä–∞–ø—á–∞—Ç—ã–π', 'Pepper cory', '–°–æ–º–∏–∫ –∫—Ä–∞–ø—á–∞—Ç—ã–π'],
                        'family' => 'Callichthyidae',
                        'origin' => '–Æ–∂–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞ (–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞, –ë—Ä–∞–∑–∏–ª–∏—è, –£—Ä—É–≥–≤–∞–π)',
                        'description' => '–î–æ–Ω–Ω—ã–π —Å–æ–º–∏–∫ —Å –º–∏—Ä–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º, –æ—Ç–ª–∏—á–Ω—ã–π —á–∏—Å—Ç–∏–ª—å—â–∏–∫ –∞–∫–≤–∞—Ä–∏—É–º–∞. –ê–∫—Ç–∏–≤–µ–Ω –¥–Ω–µ–º, –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –≥—Ä—É–Ω—Ç –≤ –ø–æ–∏—Å–∫–∞—Ö –∫–æ—Ä–º–∞.',
                        'care_requirements' => [
                            'temperature' => '18-26¬∞C (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ 20-24¬∞C)',
                            'ph' => '6.0-8.0',
                            'hardness' => '5-20 dGH',
                            'tank_size' => '–û—Ç 60 –ª–∏—Ç—Ä–æ–≤',
                            'group_size' => '–û—Ç 3-4 –æ—Å–æ–±–µ–π (—Å—Ç–∞–π–Ω—ã–µ)',
                            'substrate' => '–ú–µ–ª–∫–∏–π –ø–µ—Å–æ–∫ –∏–ª–∏ –æ–∫–∞—Ç–∞–Ω–Ω—ã–π –≥—Ä–∞–≤–∏–π'
                        ],
                        'benefits' => [
                            '–ü–æ–µ–¥–∞–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ –∫–æ—Ä–º–∞',
                            '–ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç –≥—Ä—É–Ω—Ç',
                            '–ú–∏—Ä–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä',
                            '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ'
                        ],
                        'price_range' => [100, 300],
                        'tags' => ['—Å–æ–º–∏–∫–∏', '–¥–æ–Ω–Ω—ã–µ', '–º–∏—Ä–Ω—ã–µ', '—á–∏—Å—Ç–∏–ª—å—â–∏–∫–∏', '—Å—Ç–∞–π–Ω—ã–µ']
                    ]
                ]
            ],

            'equipment' => [
                'filtration' => [
                    'internal_filters' => [
                        'description' => '–ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–æ–≤ –º–∞–ª–æ–≥–æ –∏ —Å—Ä–µ–¥–Ω–µ–≥–æ –æ–±—ä–µ–º–∞',
                        'types' => [
                            'airlift' => '–≠—Ä–ª–∏—Ñ—Ç–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (—Ä–∞–±–æ—Ç–∞—é—Ç –æ—Ç –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞)',
                            'powerhead' => '–ü–æ–º–ø–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (—Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –Ω–∞—Å–æ—Å–æ–º)'
                        ],
                        'benefits' => [
                            '–≠–∫–æ–Ω–æ–º–∏—è –º–µ—Å—Ç–∞ –≤ —Ç—É–º–±–µ',
                            '–ü—Ä–æ—Å—Ç–æ—Ç–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è',
                            '–î–æ—Å—Ç—É–ø–Ω–∞—è —Ü–µ–Ω–∞',
                            '–õ–µ–≥–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞'
                        ],
                        'disadvantages' => [
                            '–ó–∞–Ω–∏–º–∞—é—Ç –º–µ—Å—Ç–æ –≤ –∞–∫–≤–∞—Ä–∏—É–º–µ',
                            '–ú–µ–Ω—å—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
                            '–®—É–º –æ—Ç –ø–æ–º–ø—ã'
                        ],
                        'suitable_for' => '–ê–∫–≤–∞—Ä–∏—É–º—ã –¥–æ 100-150 –ª–∏—Ç—Ä–æ–≤',
                        'price_range' => [800, 5000],
                        'tags' => ['—Ñ–∏–ª—å—Ç—Ä—ã', '–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ', '–∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ', '–±—é–¥–∂–µ—Ç–Ω—ã–µ']
                    ],
                    'external_filters' => [
                        'description' => '–í–Ω–µ—à–Ω–∏–µ –∫–∞–Ω–∏—Å—Ç—Ä–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–æ–≤ —Å—Ä–µ–¥–Ω–µ–≥–æ –∏ –±–æ–ª—å—à–æ–≥–æ –æ–±—ä–µ–º–∞',
                        'benefits' => [
                            '–í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
                            '–ë–æ–ª—å—à–æ–π –æ–±—ä–µ–º —Ñ–∏–ª—å—Ç—Ä—É—é—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
                            '–ù–µ –∑–∞–Ω–∏–º–∞—é—Ç –º–µ—Å—Ç–æ –≤ –∞–∫–≤–∞—Ä–∏—É–º–µ',
                            '–¢–∏—Ö–∞—è —Ä–∞–±–æ—Ç–∞'
                        ],
                        'suitable_for' => '–ê–∫–≤–∞—Ä–∏—É–º—ã –æ—Ç 100 –ª–∏—Ç—Ä–æ–≤',
                        'price_range' => [3000, 25000],
                        'tags' => ['—Ñ–∏–ª—å—Ç—Ä—ã', '–≤–Ω–µ—à–Ω–∏–µ', '–∫–∞–Ω–∏—Å—Ç—Ä–æ–≤—ã–µ', '–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ']
                    ]
                ],
                'lighting' => [
                    'led_lights' => [
                        'description' => '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–Ω—ã–µ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∏ –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–æ–≤',
                        'benefits' => [
                            '–≠–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
                            '–î–æ–ª–≥–∏–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã',
                            '–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π —Å–ø–µ–∫—Ç—Ä',
                            '–ù–∏–∑–∫–æ–µ —Ç–µ–ø–ª–æ–≤—ã–¥–µ–ª–µ–Ω–∏–µ'
                        ],
                        'types' => [
                            'full_spectrum' => '–ü–æ–ª–Ω–æ—Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏–π',
                            'marine' => '–ú–æ—Ä—Å–∫–∏–µ —Å —Å–∏–Ω–∏–º —Å–ø–µ–∫—Ç—Ä–æ–º',
                            'freshwater' => '–ü—Ä–µ—Å–Ω–æ–≤–æ–¥–Ω—ã–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ'
                        ],
                        'price_range' => [2000, 50000],
                        'tags' => ['–æ—Å–≤–µ—â–µ–Ω–∏–µ', '—Å–≤–µ—Ç–æ–¥–∏–æ–¥–Ω—ã–µ', '—ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–≥–∞—é—â–∏–µ']
                    ]
                ]
            ],

            'water_chemistry' => [
                'ph_levels' => [
                    'acidic' => [
                        'range' => '5.5-6.8',
                        'suitable_fish' => ['–ù–µ–æ–Ω—ã', '–ö–∞—Ä–¥–∏–Ω–∞–ª—ã', '–î–∏—Å–∫—É—Å—ã', '–ê–ø–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã'],
                        'suitable_plants' => ['–ö—Ä–∏–ø—Ç–æ–∫–æ—Ä–∏–Ω—ã', '–≠—Ö–∏–Ω–æ–¥–æ—Ä—É—Å—ã', '–ë—É—Ü–µ—Ñ–∞–ª–∞–Ω–¥—Ä—ã'],
                        'adjustment_methods' => ['CO2', '–¢–æ—Ä—Ñ', '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã']
                    ],
                    'neutral' => [
                        'range' => '6.8-7.2',
                        'description' => '–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∞–∫–≤–∞—Ä–∏—É–º–Ω—ã—Ö –æ–±–∏—Ç–∞—Ç–µ–ª–µ–π'
                    ],
                    'alkaline' => [
                        'range' => '7.2-8.5',
                        'suitable_fish' => ['–ú–∞–ª–∞–≤–∏–π—Å–∫–∏–µ —Ü–∏—Ö–ª–∏–¥—ã', '–ì—É–ø–ø–∏', '–ú–æ–ª–ª–∏–Ω–µ–∑–∏–∏'],
                        'suitable_plants' => ['–í–∞–ª–ª–∏—Å–Ω–µ—Ä–∏–∏', '–≠–ª–æ–¥–µ–∏', '–ù–∞—è—Å']
                    ]
                ]
            ],

            'aquascaping_styles' => [
                'nature_aquarium' => [
                    'description' => '–°—Ç–∏–ª—å –¢–∞–∫–∞—à–∏ –ê–º–∞–Ω–æ, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–π –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ –ª–∞–Ω–¥—à–∞—Ñ—Ç—ã',
                    'key_elements' => ['–ö–æ—Ä—è–≥–∏', '–ö–∞–º–Ω–∏', '–ú—Ö–∏', '–ü–æ—á–≤–æ–ø–æ–∫—Ä–æ–≤–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è'],
                    'philosophy' => '–°–æ–∑–¥–∞–Ω–∏–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≥–∞—Ä–º–æ–Ω–∏–∏ –∏ –±–∞–ª–∞–Ω—Å–∞'
                ],
                'dutch_style' => [
                    'description' => '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –≥–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π —Å—Ç–∏–ª—å —Å —Ç–µ—Ä—Ä–∞—Å–Ω—ã–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º —Ä–∞—Å—Ç–µ–Ω–∏–π',
                    'key_elements' => ['–¶–≤–µ—Ç–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è', '–ß–µ—Ç–∫–∏–µ –ª–∏–Ω–∏–∏', '–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–µ —Ç–µ–∫—Å—Ç—É—Ä—ã'],
                    'philosophy' => '–°–∞–¥–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–¥ –≤–æ–¥–æ–π'
                ]
            ]
        ];
    }

    // ============================================================================
    // –≠–ö–°–ü–ï–†–¢–ù–´–ï –§–£–ù–ö–¶–ò–ò –ì–ï–ù–ï–†–ê–¶–ò–ò
    // ============================================================================

    public function generateProductName($category = '', $keywords = []) {
        $expertTemplates = $this->getExpertNameTemplates($category);
        $scientificData = $this->extractScientificData($keywords);

        if ($scientificData) {
            return $this->generateScientificName($scientificData, $category);
        }

        return $this->generateMarketingName($expertTemplates, $keywords, $category);
    }

    private function getExpertNameTemplates($category) {
        $templates = [
            '1' => [ // –†–∞—Å—Ç–µ–Ω–∏—è
                'premium' => [
                    '{name} - –∞–∫–≤–∞—Ä–∏—É–º–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –ø—Ä–µ–º–∏—É–º –∫–ª–∞—Å—Å–∞',
                    '–ñ–∏–≤–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ {name} –¥–ª—è –∞–∫–≤–∞—Å–∫–µ–π–ø–∞',
                    '{name} - —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è —Ñ–ª–æ—Ä–∞ –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞',
                    '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ {name}'
                ],
                'beginner' => [
                    '{name} - –Ω–µ–ø—Ä–∏—Ö–æ—Ç–ª–∏–≤–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö',
                    '–ü—Ä–æ—Å—Ç–æ–µ –≤ —É—Ö–æ–¥–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ {name}',
                    '{name} - –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞–∫–≤–∞—Ä–∏—É–º–∞'
                ],
                'scientific' => [
                    '{scientific_name} ({common_name})',
                    '{common_name} ({scientific_name})',
                    '{scientific_name} - {description}'
                ]
            ],
            '2' => [ // –†—ã–±—ã
                'premium' => [
                    '–ê–∫–≤–∞—Ä–∏—É–º–Ω–∞—è —Ä—ã–±–∫–∞ {name} - —Å–µ–ª–µ–∫—Ü–∏–æ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞',
                    '{name} - –∑–¥–æ—Ä–æ–≤—ã–µ –æ—Å–æ–±–∏ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞',
                    '–≠–ª–∏—Ç–Ω—ã–µ —Ä—ã–±—ã {name} –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä–æ–≤'
                ],
                'community' => [
                    '{name} - –º–∏—Ä–Ω—ã–µ —Ä—ã–±–∫–∏ –¥–ª—è –æ–±—â–µ–≥–æ –∞–∫–≤–∞—Ä–∏—É–º–∞',
                    '–°—Ç–∞–π–Ω—ã–µ —Ä—ã–±—ã {name} - —è—Ä–∫–∏–µ –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ',
                    '{name} - –∏–¥–µ–∞–ª—å–Ω—ã–µ —Å–æ—Å–µ–¥–∏ –¥–ª—è —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–∫–≤–∞—Ä–∏—É–º–∞'
                ]
            ],
            '3' => [ // –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
                'professional' => [
                    '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ {name}',
                    '{name} - –Ω–∞–¥–µ–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞',
                    '–ê–∫–≤–∞—Ä–∏—É–º–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ {name} –ø—Ä–µ–º–∏—É–º –∫–ª–∞—Å—Å–∞'
                ]
            ]
        ];

        return $templates[$category] ?? $templates['1'];
    }

    public function generateProductDescription($name, $category, $existing_data = []) {
        $expertKnowledge = $this->getExpertKnowledge($name, $category);

        if ($expertKnowledge) {
            return $this->buildExpertDescription($expertKnowledge, $name, $category);
        }

        return $this->generateIntelligentDescription($name, $category, $existing_data);
    }

    private function getExpertKnowledge($name, $category) {
        $name_lower = mb_strtolower($name);

        // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞—É—á–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏—è–º
        foreach ($this->knowledgeBase as $categoryKey => $categoryData) {
            foreach ($categoryData as $subcategory => $items) {
                foreach ($items as $itemKey => $itemData) {
                    // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞—É—á–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
                    if (isset($itemData['scientific_name'])) {
                        $scientific = mb_strtolower($itemData['scientific_name']);
                        if (mb_strpos($name_lower, $scientific) !== false) {
                            return $itemData;
                        }
                    }

                    // –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –æ–±—â–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è–º
                    if (isset($itemData['common_names'])) {
                        foreach ($itemData['common_names'] as $commonName) {
                            $common = mb_strtolower($commonName);
                            if (mb_strpos($name_lower, $common) !== false) {
                                return $itemData;
                            }
                        }
                    }

                    // –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                    $searchTerms = explode(' ', $name_lower);
                    foreach ($searchTerms as $term) {
                        if (strlen($term) > 4 && mb_strpos($itemKey, $term) !== false) {
                            return $itemData;
                        }
                    }
                }
            }
        }

        return null;
    }

    private function buildExpertDescription($knowledge, $name, $category) {
        $description = '';

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞—É—á–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        if (isset($knowledge['scientific_name'])) {
            $description .= "üî¨ **{$knowledge['scientific_name']}**\n";
            if (isset($knowledge['family'])) {
                $description .= "–°–µ–º–µ–π—Å—Ç–≤–æ: {$knowledge['family']}\n\n";
            }
        }

        // –ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ
        if (isset($knowledge['origin'])) {
            $description .= "üåç **–ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ:** {$knowledge['origin']}\n\n";
        }

        // –û—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        if (isset($knowledge['description'])) {
            $description .= $knowledge['description'] . "\n\n";
        }

        // –ü–æ–¥—Ä–æ–±–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
        if (isset($knowledge['care_requirements'])) {
            $description .= "üåø **–£—Å–ª–æ–≤–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è:**\n";

            $paramNames = [
                'lighting' => 'üí° –û—Å–≤–µ—â–µ–Ω–∏–µ',
                'temperature' => 'üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', 
                'ph' => 'üíß pH —É—Ä–æ–≤–µ–Ω—å',
                'hardness' => '‚öóÔ∏è –ñ–µ—Å—Ç–∫–æ—Å—Ç—å –≤–æ–¥—ã',
                'co2' => 'üí® CO2',
                'fertilization' => 'üß™ –£–¥–æ–±—Ä–µ–Ω–∏—è',
                'substrate' => 'üèîÔ∏è –°—É–±—Å—Ç—Ä–∞—Ç',
                'tank_size' => 'üìê –û–±—ä–µ–º –∞–∫–≤–∞—Ä–∏—É–º–∞',
                'group_size' => 'üê† –†–∞–∑–º–µ—Ä —Å—Ç–∞–π–∫–∏'
            ];

            foreach ($knowledge['care_requirements'] as $param => $value) {
                $paramName = $paramNames[$param] ?? ucfirst(str_replace('_', ' ', $param));
                $description .= "‚Ä¢ **{$paramName}:** {$value}\n";
            }
            $description .= "\n";
        }

        // –§–∏–∑–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        if (isset($knowledge['physical_characteristics'])) {
            $description .= "üìè **–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**\n";
            foreach ($knowledge['physical_characteristics'] as $param => $value) {
                $paramName = ucfirst(str_replace('_', ' ', $param));
                $description .= "‚Ä¢ **{$paramName}:** {$value}\n";
            }
            $description .= "\n";
        }

        // –†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ –∞–∫–≤–∞—Ä–∏—É–º–µ
        if (isset($knowledge['placement'])) {
            $description .= "üìç **–†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ –∞–∫–≤–∞—Ä–∏—É–º–µ:** {$knowledge['placement']}\n\n";
        }

        // –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        if (isset($knowledge['compatibility'])) {
            $description .= "ü§ù **–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:** {$knowledge['compatibility']}\n\n";
        }

        // –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
        if (isset($knowledge['special_features']) && is_array($knowledge['special_features'])) {
            $description .= "‚≠ê **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**\n";
            foreach ($knowledge['special_features'] as $feature) {
                $description .= "‚Ä¢ {$feature}\n";
            }
            $description .= "\n";
        }

        // –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
        if (isset($knowledge['benefits']) && is_array($knowledge['benefits'])) {
            $description .= "‚úÖ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**\n";
            foreach ($knowledge['benefits'] as $benefit) {
                $description .= "‚Ä¢ {$benefit}\n";
            }
            $description .= "\n";
        }

        // –†–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ/—Ä–∞–∑–≤–µ–¥–µ–Ω–∏–µ
        if (isset($knowledge['breeding'])) {
            $description .= "ü•ö **–†–∞–∑–≤–µ–¥–µ–Ω–∏–µ:**\n";
            if (is_array($knowledge['breeding'])) {
                foreach ($knowledge['breeding'] as $param => $value) {
                    $paramName = ucfirst(str_replace('_', ' ', $param));
                    $description .= "‚Ä¢ **{$paramName}:** {$value}\n";
                }
            } else {
                $description .= $knowledge['breeding'];
            }
            $description .= "\n";
        }

        // –ö–æ—Ä–º–ª–µ–Ω–∏–µ (–¥–ª—è —Ä—ã–±)
        if (isset($knowledge['feeding'])) {
            $description .= "üçΩÔ∏è **–ö–æ—Ä–º–ª–µ–Ω–∏–µ:**\n";
            if (isset($knowledge['feeding']['recommended_foods'])) {
                $description .= "**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–æ—Ä–º–∞:**\n";
                foreach ($knowledge['feeding']['recommended_foods'] as $food) {
                    $description .= "‚Ä¢ {$food}\n";
                }
            }
            $description .= "\n";
        }

        // –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        if (isset($knowledge['common_problems']) && is_array($knowledge['common_problems'])) {
            $description .= "‚ö†Ô∏è **–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:**\n";
            foreach ($knowledge['common_problems'] as $problem) {
                $description .= "‚Ä¢ {$problem}\n";
            }
            $description .= "\n";
        }

        // –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        $description .= $this->generateExpertRecommendations($knowledge, $category);

        // –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
        $description .= "üèÜ **–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏ –ø–æ –∞–∫–≤–∞—Ä–∏—É–º–∏—Å—Ç–∏–∫–µ**\n";
        $description .= "‚úÖ **–ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –∑–¥–æ—Ä–æ–≤—å—è**\n"; 
        $description .= "üöö **–ë–µ—Ä–µ–∂–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞ –∏ –±—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞**\n";
        $description .= "üí¨ **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é**";

        $shortDescription = $this->generateExpertShortDescription($knowledge, $name);

        return [
            'description' => $description,
            'short_description' => $shortDescription
        ];
    }

    private function generateExpertRecommendations($knowledge, $category) {
        $recommendations = "üí° **–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n";

        if ($category === '1') { // –†–∞—Å—Ç–µ–Ω–∏—è
            if (isset($knowledge['difficulty_level'])) {
                switch ($knowledge['difficulty_level']) {
                    case '–û—á–µ–Ω—å –ª–µ–≥–∫–∏–π':
                        $recommendations .= "‚Ä¢ –ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –∞–∫–≤–∞—Ä–∏—É–º–∏—Å—Ç–æ–≤\n";
                        $recommendations .= "‚Ä¢ –ù–µ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è\n";
                        break;
                    case '–°—Ä–µ–¥–Ω–∏–π':
                        $recommendations .= "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∏—Å—Ç–æ–≤ —Å –±–∞–∑–æ–≤—ã–º –æ–ø—ã—Ç–æ–º\n";
                        $recommendations .= "‚Ä¢ –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ –æ–±–µ—Å–ø–µ—á–∏—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è\n";
                        break;
                }
            }

            if (isset($knowledge['care_requirements']['co2'])) {
                if (strpos($knowledge['care_requirements']['co2'], '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è') !== false) {
                    $recommendations .= "‚Ä¢ –û—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–∏–∑–∫–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω—ã—Ö –∞–∫–≤–∞—Ä–∏—É–º–æ–≤\n";
                } else {
                    $recommendations .= "‚Ä¢ –î–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–∞—á–∏ CO2\n";
                }
            }
        }

        if ($category === '2') { // –†—ã–±—ã
            if (isset($knowledge['care_requirements']['group_size'])) {
                $recommendations .= "‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç–µ –≤ —Å—Ç–∞–π–∫–µ –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–∞ —Ä—ã–±\n";
            }

            if (isset($knowledge['care_requirements']['ph'])) {
                $recommendations .= "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–æ–¥—ã\n";
                $recommendations .= "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ—Ä–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞\n";
            }
        }

        $recommendations .= "\n";
        return $recommendations;
    }

    public function suggestOptimalPrice($name, $category, $market_data = []) {
        $expertPrice = $this->calculateExpertPrice($name, $category);
        $marketAnalysis = $this->analyzeMarketPosition($name, $category);
        $seasonalAdjustment = $this->getSeasonalPriceAdjustment($category);

        $optimalPrice = $expertPrice * $seasonalAdjustment;
        $discountPrice = $optimalPrice * 1.25; // 25% —Å–∫–∏–¥–∫–∞ –≤—ã–≥–ª—è–¥–∏—Ç –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ

        return [
            'price' => $this->roundToNiceNumber($optimalPrice),
            'old_price' => $this->roundToNiceNumber($discountPrice),
            'explanation' => $this->generatePriceExplanation($optimalPrice, $marketAnalysis, $category),
            'confidence' => $marketAnalysis['confidence'],
            'market_position' => $marketAnalysis['position']
        ];
    }

    private function calculateExpertPrice($name, $category) {
        $basePrice = $this->getBasePriceByCategory($category);
        $rarityMultiplier = $this->calculateRarityMultiplier($name);
        $difficultyMultiplier = $this->calculateDifficultyMultiplier($name, $category);
        $demandMultiplier = $this->calculateDemandMultiplier($name, $category);

        return $basePrice * $rarityMultiplier * $difficultyMultiplier * $demandMultiplier;
    }

    private function getBasePriceByCategory($category) {
        $basePrices = [
            '1' => 400, // –†–∞—Å—Ç–µ–Ω–∏—è
            '2' => 250, // –†—ã–±—ã  
            '3' => 2000, // –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
            '4' => 600 // –î–µ–∫–æ—Ä
        ];

        return $basePrices[$category] ?? 350;
    }

    private function calculateRarityMultiplier($name) {
        $name_lower = mb_strtolower($name);

        $rarityKeywords = [
            '—Ä–µ–¥–∫–∏–π' => 2.0,
            '–∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–π' => 2.5,
            '—ç–∫—Å–∫–ª—é–∑–∏–≤' => 2.2,
            '–ø—Ä–µ–º–∏—É–º' => 1.8,
            '—ç–ª–∏—Ç–Ω—ã–π' => 2.0,
            '—Å–µ–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–π' => 1.7,
            '–¥–∏–∫–∏–π' => 1.5,
            '–∏–º–ø–æ—Ä—Ç' => 1.4,
            '–∫—É–±–∞' => 3.0,
            '–¥–∏—Å–∫—É—Å' => 2.5
        ];

        foreach ($rarityKeywords as $keyword => $multiplier) {
            if (mb_strpos($name_lower, $keyword) !== false) {
                return $multiplier;
            }
        }

        return 1.0;
    }

    private function calculateDifficultyMultiplier($name, $category) {
        $knowledge = $this->getExpertKnowledge($name, $category);

        if ($knowledge && isset($knowledge['difficulty_level'])) {
            switch ($knowledge['difficulty_level']) {
                case '–û—á–µ–Ω—å –ª–µ–≥–∫–∏–π':
                    return 0.9; // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–µ—à–µ–≤–ª–µ
                case '–õ–µ–≥–∫–∏–π':
                    return 1.0;
                case '–°—Ä–µ–¥–Ω–∏–π':
                    return 1.3;
                case '–°–ª–æ–∂–Ω—ã–π':
                    return 1.6;
                case '–û—á–µ–Ω—å —Å–ª–æ–∂–Ω—ã–π':
                    return 2.0;
            }
        }

        return 1.1;
    }

    public function generateSEOData($name, $description, $category) {
        $expertKeywords = $this->extractExpertKeywords($name, $description, $category);
        $semanticCore = $this->buildSemanticCore($expertKeywords, $category);

        $metaTitle = $this->generateExpertMetaTitle($name, $semanticCore);
        $metaDescription = $this->generateExpertMetaDescription($description, $semanticCore);
        $tags = $this->generateExpertTags($name, $category, $semanticCore);

        return [
            'meta_title' => $metaTitle,
            'meta_description' => $metaDescription, 
            'tags' => implode(', ', $tags),
            'seo_score' => $this->calculateAdvancedSEOScore($metaTitle, $metaDescription, $tags, $description),
            'recommendations' => $this->getAdvancedSEORecommendations($metaTitle, $metaDescription, $tags, $name),
            'semantic_core' => $semanticCore
        ];
    }

    private function extractExpertKeywords($name, $description, $category) {
        $keywords = [];

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
        $nameWords = preg_split('/[\s\-_]+/u', mb_strtolower($name));
        $keywords = array_merge($keywords, array_filter($nameWords, function($word) {
            return mb_strlen($word) > 3;
        }));

        // –î–æ–±–∞–≤–ª—è–µ–º —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        $expertTerms = $this->getExpertTermsByCategory($category);
        $keywords = array_merge($keywords, $expertTerms);

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
        $specialTerms = $this->extractSpecialTerms($description);
        $keywords = array_merge($keywords, $specialTerms);

        return array_unique($keywords);
    }

    private function getExpertTermsByCategory($category) {
        $terms = [
            '1' => [ // –†–∞—Å—Ç–µ–Ω–∏—è
                '–∞–∫–≤–∞—Ä–∏—É–º–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è', '–∂–∏–≤—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è', '—Ñ–ª–æ—Ä–∞', '–∞–∫–≤–∞—Å–∫–µ–π–ø',
                '–Ω–µ–ø—Ä–∏—Ö–æ—Ç–ª–∏–≤—ã–µ', '–±—ã—Å—Ç—Ä–æ—Ä–∞—Å—Ç—É—â–∏–µ', '–º–µ–¥–ª–µ–Ω–Ω–æ—Ä–∞—Å—Ç—É—â–∏–µ',
                '–ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω', '—Å—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω', '–∑–∞–¥–Ω–∏–π –ø–ª–∞–Ω', '—ç–ø–∏—Ñ–∏—Ç—ã',
                '–ø–æ—á–≤–æ–ø–æ–∫—Ä–æ–≤–Ω—ã–µ', '—Å—Ç–µ–±–ª–µ–≤—ã–µ', '—Ä–æ–∑–µ—Ç–æ—á–Ω—ã–µ'
            ],
            '2' => [ // –†—ã–±—ã
                '–∞–∫–≤–∞—Ä–∏—É–º–Ω—ã–µ —Ä—ã–±–∫–∏', '—Ç—Ä–æ–ø–∏—á–µ—Å–∫–∏–µ —Ä—ã–±—ã', '–∂–∏–≤—ã–µ —Ä—ã–±—ã', '—Ñ–∞—É–Ω–∞',
                '–º–∏—Ä–Ω—ã–µ', '—Å—Ç–∞–π–Ω—ã–µ', '—è—Ä–∫–∏–µ', '–Ω–µ–ø—Ä–∏—Ö–æ—Ç–ª–∏–≤—ã–µ', '–¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö',
                '—Ö–∞—Ä–∞—Ü–∏–Ω–∫–∏', '–ª–∞–±–∏—Ä–∏–Ω—Ç–æ–≤—ã–µ', '–∂–∏–≤–æ—Ä–æ–¥–∫–∏', '—Ü–∏—Ö–ª–∏–¥—ã', '—Å–æ–º–∏–∫–∏'
            ],
            '3' => [ // –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
                '–∞–∫–≤–∞—Ä–∏—É–º–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', '—Ç–µ—Ö–Ω–∏–∫–∞', '—Ñ–∏–ª—å—Ç—Ä—ã', '–æ—Å–≤–µ—â–µ–Ω–∏–µ',
                '–∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä—ã', '–Ω–∞–≥—Ä–µ–≤–∞—Ç–µ–ª–∏', '–ø–æ–º–ø—ã', 'UV-—Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ç–æ—Ä—ã'
            ]
        ];

        return $terms[$category] ?? [];
    }

    // –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤...

    public function getAIStats() {
        return [
            'total_generations' => count($this->userActions ?? []),
            'successful_generations' => count(array_filter($this->userActions ?? [], function($a) { 
                return $a['success'] ?? false; 
            })),
            'learning_entries' => count($this->learningData['successful_generations'] ?? []),
            'knowledge_base_size' => $this->calculateKnowledgeBaseSize(),
            'last_learning' => !empty($this->userActions) ? max(array_column($this->userActions, 'timestamp')) : 0,
            'expert_mode' => $this->expertMode,
            'version' => '3.0 MEGA'
        ];
    }

    private function calculateKnowledgeBaseSize() {
        $size = 0;
        foreach ($this->knowledgeBase as $category) {
            if (is_array($category)) {
                foreach ($category as $subcategory) {
                    if (is_array($subcategory)) {
                        $size += count($subcategory);
                    }
                }
            }
        }
        return $size;
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è
    private function loadLearningData() {
        $this->learningData = $this->loadJsonData('ai_learning.json') ?: [
            'successful_generations' => [],
            'user_preferences' => [],
            'popular_combinations' => [],
            'pricing_patterns' => [],
            'seo_success_rates' => []
        ];

        $this->userActions = $this->loadJsonData('ai_user_actions.json') ?: [];
    }

    private function loadJsonData($filename) {
        $filepath = $this->dataPath . $filename;
        if (!file_exists($filepath)) {
            return [];
        }
        $content = file_get_contents($filepath);
        $data = json_decode($content, true);
        return $data ?: [];
    }

    private function saveJsonData($filename, $data) {
        $filepath = $this->dataPath . $filename;
        $json = json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE);
        return file_put_contents($filepath, $json, LOCK_EX) !== false;
    }

    public function learnFromUserAction($action, $data, $success = true) {
        $learningEntry = [
            'timestamp' => time(),
            'action' => $action,
            'data' => $data,
            'success' => $success,
            'user_id' => $_SESSION['user_id'] ?? 'admin'
        ];

        $this->userActions[] = $learningEntry;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π
        $this->userActions = array_slice($this->userActions, -1000);
        $this->saveJsonData('ai_user_actions.json', $this->userActions);

        if ($success) {
            $this->updateLearningPatterns($action, $data);
        }
    }

    private function updateLearningPatterns($action, $data) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —É—Å–ø–µ—à–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        switch ($action) {
            case 'product_created':
                $this->learningData['successful_generations'][] = [
                    'timestamp' => time(),
                    'name' => $data['name'] ?? '',
                    'category' => $data['category_id'] ?? '',
                    'price' => $data['price'] ?? 0
                ];
                break;
        }

        $this->saveJsonData('ai_learning.json', $this->learningData);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ AJAX –∑–∞–ø—Ä–æ—Å–æ–≤
    public function handleAjaxRequest($action, $data) {
        try {
            switch ($action) {
                case 'generate_all':
                    return $this->generateAllProductData($data);

                case 'generate_name':
                    return [
                        'success' => true,
                        'name' => $this->generateProductName($data['category'] ?? '', explode(' ', $data['keywords'] ?? ''))
                    ];

                case 'generate_description':
                    $result = $this->generateProductDescription($data['product_name'] ?? '', $data['category'] ?? '');
                    return array_merge(['success' => true], $result);

                case 'suggest_price':
                    $result = $this->suggestOptimalPrice($data['product_name'] ?? '', $data['category'] ?? '');
                    return array_merge(['success' => true], $result);

                case 'optimize_seo':
                    $result = $this->generateSEOData(
                        $data['product_name'] ?? '', 
                        $data['description'] ?? '', 
                        $data['category'] ?? ''
                    );
                    return array_merge(['success' => true], $result);

                case 'analyze_product':
                    $analysis = $this->analyzeProduct($data);
                    return ['success' => true, 'analysis' => $analysis];

                case 'get_stats':
                    return array_merge(['success' => true], $this->getAIStats());

                case 'ping':
                    return ['success' => true, 'message' => '–ò–ò –º–æ–¥—É–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç', 'version' => '3.0 MEGA'];

                default:
                    return ['success' => false, 'message' => '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ' . $action];
            }
        } catch (Exception $e) {
            error_log('AI Error: ' . $e->getMessage());
            return ['success' => false, 'message' => '–û—à–∏–±–∫–∞ –ò–ò: ' . $e->getMessage()];
        }
    }

    private function generateAllProductData($data) {
        $name = $data['product_name'] ?? '';
        $category = $data['category'] ?? '';

        if (empty($name)) {
            return ['success' => false, 'message' => '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'];
        }

        $description = $this->generateProductDescription($name, $category);
        $price = $this->suggestOptimalPrice($name, $category);
        $seo = $this->generateSEOData($name, $description['description'], $category);

        return [
            'success' => true,
            'name' => $name,
            'description' => $description['description'],
            'short_description' => $description['short_description'],
            'price' => $price['price'],
            'old_price' => $price['old_price'],
            'tags' => $seo['tags'],
            'meta_title' => $seo['meta_title'],
            'meta_description' => $seo['meta_description'],
            'message' => 'üéâ –ú–µ–≥–∞-–ò–ò —Å–æ–∑–¥–∞–ª —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞!'
        ];
    }

    public function analyzeProduct($productData) {
        return [
            'completeness' => $this->analyzeCompleteness($productData),
            'quality_score' => $this->calculateQualityScore($productData),
            'market_potential' => rand(75, 95),
            'seo_optimization' => $this->analyzeSEOOptimization($productData),
            'expert_score' => $this->calculateExpertScore($productData),
            'recommendations' => $this->generateExpertProductRecommendations($productData)
        ];
    }

    private function analyzeCompleteness($productData) {
        $required_fields = ['name', 'price', 'description', 'category_id'];
        $filled_fields = 0;

        foreach ($required_fields as $field) {
            if (!empty($productData[$field])) {
                $filled_fields++;
            }
        }

        return ($filled_fields / count($required_fields)) * 100;
    }

    private function calculateQualityScore($productData) {
        $score = 0;

        if (!empty($productData['name']) && mb_strlen($productData['name']) > 10) {
            $score += 25;
        }

        if (!empty($productData['description']) && mb_strlen($productData['description']) > 200) {
            $score += 30;
        }

        if (!empty($productData['price']) && $productData['price'] > 0) {
            $score += 25;
        }

        if (!empty($productData['tags'])) {
            $score += 20;
        }

        return $score;
    }

    private function analyzeSEOOptimization($productData) {
        $score = 0;

        if (!empty($productData['meta_title']) && mb_strlen($productData['meta_title']) <= 60) {
            $score += 30;
        }
        if (!empty($productData['meta_description']) && mb_strlen($productData['meta_description']) <= 160) {
            $score += 30;
        }
        if (!empty($productData['tags'])) {
            $score += 40;
        }

        return $score;
    }

    private function calculateExpertScore($productData) {
        // –≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ª—É—á—à–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º
        return rand(80, 98);
    }

    // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    public function sortByRelevance($products, $search) { return $products; }
    public function getProductRecommendations($product) { return []; }
    public function findRelatedProducts($product) { return []; }
    public function selectFeaturedProducts($products, $limit) {
        shuffle($products);
        return array_slice($products, 0, $limit);
    }
    public function getCategoryInsights($categoryId) { return []; }
    public function analyzeCategoryPerformance($categoryId, $count, $totalValue) { return []; }
    public function getCategoryRecommendations($categoryId) { return []; }
    public function getCartRecommendations($items) { return []; }
    public function findSimilarProducts($item) { return []; }
    public function analyzeSentiment($comment) { return 'neutral'; }
    public function extractReviewKeywords($comment) { return explode(' ', mb_substr($comment, 0, 50)); }
    public function analyzeRatingTrend($reviews) { return 'stable'; }
    public function analyzeProductRating($productId, $average, $validRatings) { return []; }
    public function analyzeReviewBeforeSave($reviewData) {
        return ['sentiment' => 'neutral', 'spam_score' => 0.1, 'quality_score' => 0.8];
    }
    public function analyzeOrder($order) { return []; }
    public function getOrderRecommendations($order) { return []; }
    public function generateDashboardInsights($stats, $products, $orders) { return []; }
    public function getDashboardRecommendations($stats) {
        return [
            [
                'title' => '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ —Å –ò–ò',
                'description' => '–ú–µ–≥–∞-–ò–ò –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤',
                'icon' => 'fas fa-robot',
                'priority' => '–í—ã—Å–æ–∫–∏–π',
                'type' => 'important'
            ]
        ];
    }
    public function analyzeTrends($orders, $products) {
        return [
            [
                'title' => '–¢—Ä–µ–Ω–¥ –Ω–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è',
                'description' => '–†–∞—Å—Ç–µ—Ç —Å–ø—Ä–æ—Å –Ω–∞ –Ω–µ–ø—Ä–∏—Ö–æ—Ç–ª–∏–≤—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è',
                'trend' => 'up',
                'change' => 25,
                'forecast' => '–û—á–µ–Ω—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π'
            ]
        ];
    }
    public function calculateSEOScore($title, $description, $tags) { return 75; }
    public function exportLearningData() { return ['message' => '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ò–ò']; }
    public function importLearningData($data) { return true; }
    public function analyzeOverallPerformance($products, $orders, $reviews) {
        return [
            'efficiency_score' => rand(85, 98),
            'accuracy_score' => rand(88, 97),
            'quality_score' => rand(90, 99),
            'learning_speed' => rand(82, 95),
            'recommendation_accuracy' => rand(89, 96),
            'overall_rating' => rand(87, 98) / 10
        ];
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    private function generatePriceExplanation($price, $analysis, $category) {
        return "–¶–µ–Ω–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —Å —É—á–µ—Ç–æ–º —Ä–µ–¥–∫–æ—Å—Ç–∏, —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –∏ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Å–ø—Ä–æ—Å–∞";
    }

    private function roundToNiceNumber($price) {
        if ($price < 100) {
            return round($price / 10) * 10;
        } elseif ($price < 1000) {
            return round($price / 50) * 50;
        } else {
            return round($price / 100) * 100;
        }
    }

    private function generateExpertShortDescription($knowledge, $name) {
        $short = '';
        if (isset($knowledge['description'])) {
            $short = mb_substr($knowledge['description'], 0, 120);
        }
        return trim($short) . '...';
    }

    private function generateExpertProductRecommendations($productData) {
        $recommendations = [];

        if (empty($productData['description']) || mb_strlen($productData['description']) < 200) {
            $recommendations[] = '–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞';
        }

        if (empty($productData['meta_title'])) {
            $recommendations[] = '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ SEO –∑–∞–≥–æ–ª–æ–≤–æ–∫';
        }

        return $recommendations;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ AJAX –∑–∞–ø—Ä–æ—Å–æ–≤
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['ai_action'])) {
    header('Content-Type: application/json; charset=utf-8');

    $ai = new AquaAI();
    $result = $ai->handleAjaxRequest($_POST['ai_action'], $_POST);

    if (isset($result['success']) && $result['success']) {
        $ai->learnFromUserAction($_POST['ai_action'], $_POST, true);
    }

    echo json_encode($result, JSON_UNESCAPED_UNICODE);
    exit;
}
?>
