<?php
// ============================================================================
// ü§ñ –ú–û–î–£–õ–¨ –ò–ò –ü–û–ú–û–©–ù–ò–ö–ê v2.0 - –ú–ï–ì–ê –í–ï–†–°–ò–Ø
// –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –ò–ò —Å –æ–±—É—á–µ–Ω–∏–µ–º –∏ –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –ø–æ –∞–∫–≤–∞—Ä–∏—É–º–∏—Å—Ç–∏–∫–µ
// ============================================================================

class AquaAI {

    private $knowledgeBase;
    private $learningData;
    private $userActions;

    public function __construct() {
        $this->initializeKnowledgeBase();
        $this->loadLearningData();
    }

    // ============================================================================
    // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô –ü–û –ê–ö–í–ê–†–ò–£–ú–ò–°–¢–ò–ö–ï
    // ============================================================================

    private function initializeKnowledgeBase() {
        $this->knowledgeBase = [
            'plants' => [
                'easy_care' => [
                    'anubias' => [
                        'scientific_name' => 'Anubias barteri var. nana',
                        'common_names' => ['–ê–Ω—É–±–∏–∞—Å –Ω–∞–Ω–∞', '–ö–∞—Ä–ª–∏–∫–æ–≤—ã–π –∞–Ω—É–±–∏–∞—Å', '–ê–Ω—É–±–∏–∞—Å –ë–∞—Ä—Ç–µ—Ä–∞ –Ω–∞–Ω–∞'],
                        'description' => '–ù–µ–ø—Ä–∏—Ö–æ—Ç–ª–∏–≤–æ–µ –º–µ–¥–ª–µ–Ω–Ω–æ—Ä–∞—Å—Ç—É—â–µ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ —Å —Ç–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–º–∏ –∫–æ–∂–∏—Å—Ç—ã–º–∏ –ª–∏—Å—Ç—å—è–º–∏. –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –∞–∫–≤–∞—Ä–∏—É–º–∏—Å—Ç–æ–≤.',
                        'care_requirements' => [
                            'lighting' => '–ù–∏–∑–∫–æ–µ-—Å—Ä–µ–¥–Ω–µ–µ (0.25-0.5 –í—Ç/–ª)',
                            'temperature' => '22-28¬∞C',
                            'ph' => '6.0-8.0',
                            'hardness' => '2-15 dGH',
                            'co2' => '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è',
                            'fertilization' => '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è, –∂–∏–¥–∫–∏–µ —É–¥–æ–±—Ä–µ–Ω–∏—è 1-2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é'
                        ],
                        'placement' => '–ü–µ—Ä–µ–¥–Ω–∏–π/—Å—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω, –∫–æ—Ä—è–≥–∏, –∫–∞–º–Ω–∏',
                        'growth_rate' => '–û—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω—ã–π',
                        'size' => '5-15 —Å–º',
                        'compatibility' => '–°–æ–≤–º–µ—Å—Ç–∏–º —Å–æ –≤—Å–µ–º–∏ —Ä—ã–±–∞–º–∏, –≤–∫–ª—é—á–∞—è —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—è–¥–Ω—ã—Ö',
                        'propagation' => '–î–µ–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–∏—â–∞',
                        'benefits' => [
                            '–ü–æ–≥–ª–æ—â–∞–µ—Ç –Ω–∏—Ç—Ä–∞—Ç—ã –∏ —Ñ–æ—Å—Ñ–∞—Ç—ã',
                            '–°–æ–∑–¥–∞–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É–∫—Ä—ã—Ç–∏—è –¥–ª—è –º–∞–ª—å–∫–æ–≤',
                            '–ù–µ–ø—Ä–∏—Ö–æ—Ç–ª–∏–≤ –∫ —É—Å–ª–æ–≤–∏—è–º',
                            '–ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç - —Ä–µ–¥–∫–æ —Ç—Ä–µ–±—É–µ—Ç –æ–±—Ä–µ–∑–∫–∏'
                        ],
                        'price_range' => [300, 800],
                        'tags' => ['–Ω–µ–ø—Ä–∏—Ö–æ—Ç–ª–∏–≤—ã–µ', '–º–µ–¥–ª–µ–Ω–Ω–æ—Ä–∞—Å—Ç—É—â–∏–µ', '—Ç–µ–Ω–µ–ª—é–±–∏–≤—ã–µ', '–¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö', '—ç–ø–∏—Ñ–∏—Ç']
                    ],
                    'java_moss' => [
                        'scientific_name' => 'Taxiphyllum barbieri',
                        'common_names' => ['–Ø–≤–∞–Ω—Å–∫–∏–π –º–æ—Ö', 'Java moss'],
                        'description' => '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–æ—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ª–∞–Ω–¥—à–∞—Ñ—Ç–∞. –ë—ã—Å—Ç—Ä–æ —Ä–∞—Å—Ç–µ—Ç –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –ª—é–±—ã–º —É—Å–ª–æ–≤–∏—è–º.',
                        'care_requirements' => [
                            'lighting' => '–ù–∏–∑–∫–æ–µ-–≤—ã—Å–æ–∫–æ–µ (0.2-1.0 –í—Ç/–ª)',
                            'temperature' => '15-30¬∞C',
                            'ph' => '5.0-9.0',
                            'hardness' => '2-25 dGH',
                            'co2' => '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è',
                            'fertilization' => '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'
                        ],
                        'placement' => '–õ—é–±–æ–µ –º–µ—Å—Ç–æ, –∫–æ—Ä—è–≥–∏, –∫–∞–º–Ω–∏, —Å—É–±—Å—Ç—Ä–∞—Ç',
                        'growth_rate' => '–ë—ã—Å—Ç—Ä—ã–π',
                        'size' => '3-10 —Å–º',
                        'compatibility' => '–°–æ–≤–º–µ—Å—Ç–∏–º —Å–æ –≤—Å–µ–º–∏ —Ä—ã–±–∞–º–∏',
                        'benefits' => [
                            '–ò–¥–µ–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –Ω–µ—Ä–µ—Å—Ç–∞',
                            '–£–∫—Ä—ã—Ç–∏–µ –¥–ª—è –º–∞–ª—å–∫–æ–≤',
                            '–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä',
                            '–ù–∞—Å—ã—â–∞–µ—Ç –≤–æ–¥—É –∫–∏—Å–ª–æ—Ä–æ–¥–æ–º'
                        ],
                        'price_range' => [150, 400],
                        'tags' => ['–º—Ö–∏', '–±—ã—Å—Ç—Ä–æ—Ä–∞—Å—Ç—É—â–∏–µ', '—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ', '–¥–ª—è –Ω–µ—Ä–µ—Å—Ç–∞']
                    ],
                    'vallisneria' => [
                        'scientific_name' => 'Vallisneria spiralis',
                        'common_names' => ['–í–∞–ª–ª–∏—Å–Ω–µ—Ä–∏—è —Å–ø–∏—Ä–∞–ª—å–Ω–∞—è', '–í–∞–ª–ª–∏—Å–Ω–µ—Ä–∏—è'],
                        'description' => '–î–ª–∏–Ω–Ω–æ—Å—Ç–µ–±–µ–ª—å–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –∑–∞–¥–Ω–µ–≥–æ –ø–ª–∞–Ω–∞. –ë—ã—Å—Ç—Ä–æ —Ä–∞—Å—Ç–µ—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∑–∞–≤–µ—Å—É.',
                        'care_requirements' => [
                            'lighting' => '–°—Ä–µ–¥–Ω–µ–µ-—è—Ä–∫–æ–µ (0.4-0.8 –í—Ç/–ª)',
                            'temperature' => '20-28¬∞C',
                            'ph' => '6.5-8.5',
                            'hardness' => '8-25 dGH',
                            'co2' => '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è',
                            'fertilization' => '–ö–æ—Ä–Ω–µ–≤–∞—è –ø–æ–¥–∫–æ—Ä–º–∫–∞'
                        ],
                        'placement' => '–ó–∞–¥–Ω–∏–π –ø–ª–∞–Ω',
                        'growth_rate' => '–ë—ã—Å—Ç—Ä—ã–π',
                        'size' => '30-80 —Å–º',
                        'benefits' => [
                            '–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä',
                            '–ü–æ–≥–ª–æ—â–∞–µ—Ç –∏–∑–±—ã—Ç–æ–∫ –Ω–∏—Ç—Ä–∞—Ç–æ–≤',
                            '–°–æ–∑–¥–∞–µ—Ç —É–∫—Ä—ã—Ç–∏–µ –¥–ª—è —Ä—ã–±',
                            '–ù–∞—Å—ã—â–∞–µ—Ç –≤–æ–¥—É –∫–∏—Å–ª–æ—Ä–æ–¥–æ–º'
                        ],
                        'price_range' => [100, 300],
                        'tags' => ['–¥–ª–∏–Ω–Ω–æ—Å—Ç–µ–±–µ–ª—å–Ω—ã–µ', '–±—ã—Å—Ç—Ä–æ—Ä–∞—Å—Ç—É—â–∏–µ', '–∑–∞–¥–Ω–∏–π –ø–ª–∞–Ω', '–æ—á–∏—Å—Ç–∏—Ç–µ–ª–∏']
                    ]
                ],
                'advanced_care' => [
                    'hemianthus_cuba' => [
                        'scientific_name' => 'Hemianthus callitrichoides',
                        'common_names' => ['–•–µ–º–∏–∞–Ω—Ç—É—Å –ö—É–±–∞', '–ö—É–±–∞', 'HC Cuba'],
                        'description' => '–°–∞–º–æ–µ –º–∞–ª–µ–Ω—å–∫–æ–µ –∞–∫–≤–∞—Ä–∏—É–º–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ. –°–æ–∑–¥–∞–µ—Ç –ø–ª–æ—Ç–Ω—ã–π –∫–æ–≤–µ—Ä –∏–∑—É–º—Ä—É–¥–Ω–æ-–∑–µ–ª–µ–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞.',
                        'care_requirements' => [
                            'lighting' => '–û—á–µ–Ω—å —è—Ä–∫–æ–µ (0.8-1.5 –í—Ç/–ª)',
                            'temperature' => '20-26¬∞C',
                            'ph' => '6.0-7.0',
                            'hardness' => '0-10 dGH',
                            'co2' => '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ (20-30 –º–≥/–ª)',
                            'fertilization' => '–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è'
                        ],
                        'placement' => '–ü–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω, –∫–æ–≤–µ—Ä',
                        'growth_rate' => '–ú–µ–¥–ª–µ–Ω–Ω—ã–π',
                        'size' => '1-3 —Å–º',
                        'difficulty' => '–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π',
                        'benefits' => [
                            '–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∑–µ–ª–µ–Ω—ã–π –∫–æ–≤–µ—Ä',
                            '–í—ã–¥–µ–ª—è–µ—Ç –º–Ω–æ–≥–æ –∫–∏—Å–ª–æ—Ä–æ–¥–∞',
                            '–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–¥—ã'
                        ],
                        'price_range' => [400, 1200],
                        'tags' => ['–∫–æ–≤—Ä–æ–≤—ã–µ', '—Å–ª–æ–∂–Ω—ã–µ', '–¥–ª—è –ø—Ä–æ—Ñ–∏', 'CO2']
                    ]
                ]
            ],

            'fish' => [
                'peaceful_community' => [
                    'neon_tetra' => [
                        'scientific_name' => 'Paracheirodon innesi',
                        'common_names' => ['–ù–µ–æ–Ω –≥–æ–ª—É–±–æ–π', '–ù–µ–æ–Ω –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–π'],
                        'description' => '–Ø—Ä–∫–∞—è —Å—Ç–∞–π–Ω–∞—è —Ä—ã–±–∫–∞ —Å –Ω–µ–æ–Ω–æ–≤–æ–π –ø–æ–ª–æ—Å–æ–π. –ú–∏—Ä–Ω–∞—è –∏ –∞–∫—Ç–∏–≤–Ω–∞—è.',
                        'care_requirements' => [
                            'temperature' => '20-26¬∞C',
                            'ph' => '5.0-7.0',
                            'hardness' => '1-10 dGH',
                            'tank_size' => '–û—Ç 40 –ª–∏—Ç—Ä–æ–≤',
                            'group_size' => '–û—Ç 6 –æ—Å–æ–±–µ–π'
                        ],
                        'size' => '3-4 —Å–º',
                        'lifespan' => '5-8 –ª–µ—Ç',
                        'feeding' => '–í—Å–µ—è–¥–Ω—ã–µ, –º–µ–ª–∫–∏–π –∫–æ—Ä–º',
                        'behavior' => '–ú–∏—Ä–Ω—ã–µ, —Å—Ç–∞–π–Ω—ã–µ',
                        'breeding' => '–°–ª–æ–∂–Ω–æ–µ, —Ç—Ä–µ–±—É–µ—Ç –º—è–≥–∫–æ–π –≤–æ–¥—ã',
                        'price_range' => [50, 150],
                        'tags' => ['—Å—Ç–∞–π–Ω—ã–µ', '–º–∏—Ä–Ω—ã–µ', '—è—Ä–∫–∏–µ', '—Ö–∞—Ä–∞—Ü–∏–Ω–∫–∏']
                    ],
                    'guppy' => [
                        'scientific_name' => 'Poecilia reticulata',
                        'common_names' => ['–ì—É–ø–ø–∏', '–ì—É–ø–ø–∏ –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–µ'],
                        'description' => '–ñ–∏–≤–æ—Ä–æ–¥—è—â–∞—è —Ä—ã–±–∫–∞ —Å —è—Ä–∫–æ–π –æ–∫—Ä–∞—Å–∫–æ–π. –ù–µ–ø—Ä–∏—Ö–æ—Ç–ª–∏–≤–∞ –∏ –ª–µ–≥–∫–æ —Ä–∞–∑–º–Ω–æ–∂–∞–µ—Ç—Å—è.',
                        'care_requirements' => [
                            'temperature' => '22-28¬∞C',
                            'ph' => '6.5-8.5',
                            'hardness' => '10-25 dGH',
                            'tank_size' => '–û—Ç 30 –ª–∏—Ç—Ä–æ–≤',
                            'group_size' => '3-5 –æ—Å–æ–±–µ–π'
                        ],
                        'size' => '3-6 —Å–º',
                        'lifespan' => '2-3 –≥–æ–¥–∞',
                        'feeding' => '–í—Å–µ—è–¥–Ω—ã–µ',
                        'behavior' => '–ú–∏—Ä–Ω—ã–µ, –∞–∫—Ç–∏–≤–Ω—ã–µ',
                        'breeding' => '–û—á–µ–Ω—å –ª–µ–≥–∫–æ–µ',
                        'price_range' => [80, 300],
                        'tags' => ['–∂–∏–≤–æ—Ä–æ–¥—è—â–∏–µ', '–Ω–µ–ø—Ä–∏—Ö–æ—Ç–ª–∏–≤—ã–µ', '—è—Ä–∫–∏–µ', '–¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö']
                    ]
                ]
            ],

            'equipment' => [
                'filtration' => [
                    'internal_filters' => [
                        'description' => '–ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –∞–∫–≤–∞—Ä–∏—É–º–æ–≤',
                        'benefits' => ['–≠–∫–æ–Ω–æ–º–∏—è –º–µ—Å—Ç–∞', '–ü—Ä–æ—Å—Ç–æ—Ç–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è', '–î–æ—Å—Ç—É–ø–Ω–∞—è —Ü–µ–Ω–∞'],
                        'suitable_for' => '–ê–∫–≤–∞—Ä–∏—É–º—ã –¥–æ 100 –ª–∏—Ç—Ä–æ–≤',
                        'price_range' => [800, 3000],
                        'tags' => ['—Ñ–∏–ª—å—Ç—Ä—ã', '–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ', '–∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ']
                    ],
                    'external_filters' => [
                        'description' => '–ú–æ—â–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö –∞–∫–≤–∞—Ä–∏—É–º–æ–≤',
                        'benefits' => ['–í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–ë–æ–ª—å—à–æ–π –æ–±—ä–µ–º –Ω–∞–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π', '–ë–µ—Å—à—É–º–Ω–æ—Å—Ç—å'],
                        'suitable_for' => '–ê–∫–≤–∞—Ä–∏—É–º—ã –æ—Ç 80 –ª–∏—Ç—Ä–æ–≤',
                        'price_range' => [3000, 15000],
                        'tags' => ['—Ñ–∏–ª—å—Ç—Ä—ã', '–≤–Ω–µ—à–Ω–∏–µ', '–º–æ—â–Ω—ã–µ']
                    ]
                ],
                'lighting' => [
                    'led_lights' => [
                        'description' => '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ',
                        'benefits' => ['–ù–∏–∑–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ', '–î–æ–ª–≥–∏–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã', '–†–µ–≥—É–ª–∏—Ä—É–µ–º–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å'],
                        'suitable_for' => '–õ—é–±—ã–µ –∞–∫–≤–∞—Ä–∏—É–º—ã',
                        'price_range' => [1500, 8000],
                        'tags' => ['–æ—Å–≤–µ—â–µ–Ω–∏–µ', 'LED', '—ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–≥–∞—é—â–∏–µ']
                    ]
                ]
            ]
        ];
    }

    // ============================================================================
    // –°–ò–°–¢–ï–ú–ê –ú–ê–®–ò–ù–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø
    // ============================================================================

    private function loadLearningData() {
        $this->learningData = loadJsonData('ai_learning.json') ?: [
            'successful_generations' => [],
            'user_preferences' => [],
            'popular_combinations' => [],
            'pricing_patterns' => [],
            'seo_success_rates' => []
        ];

        $this->userActions = loadJsonData('ai_user_actions.json') ?: [];
    }

    public function learnFromUserAction($action, $data, $success = true) {
        $learningEntry = [
            'timestamp' => time(),
            'action' => $action,
            'data' => $data,
            'success' => $success,
            'user_id' => $_SESSION['user_id'] ?? 'guest'
        ];

        $this->userActions[] = $learningEntry;

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if ($success) {
            switch ($action) {
                case 'product_created':
                    // $this->analyzeSuccessfulDescription($data); // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
                    break;
                case 'description_generated':
                    $this->analyzeSuccessfulDescription($data);
                    break;
                case 'price_accepted':
                    $this->analyzePricingPattern($data);
                    break;
            }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è
        saveJsonData('ai_user_actions.json', array_slice($this->userActions, -1000)); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –¥–µ–π—Å—Ç–≤–∏–π
        $this->updateLearningPatterns();
    }

    private function analyzeSuccessfulProduct($productData) {
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        $combination = [
            'category' => $productData['category_id'] ?? null,
            'price_range' => $this->getPriceRange($productData['price'] ?? 0),
            'tags' => explode(',', $productData['tags'] ?? ''),
            'description_length' => strlen($productData['description'] ?? ''),
            'has_images' => !empty($productData['main_image'])
        ];

        $this->learningData['successful_generations'][] = $combination;

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        $this->updatePopularCombinations($combination);
    }

    private function updateLearningPatterns() {
        saveJsonData('ai_learning.json', $this->learningData);
    }

    private function updatePopularCombinations($combination) {
        // –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
    }

    private function getPriceRange($price) {
        if ($price < 200) return 'low';
        if ($price < 600) return 'medium';
        if ($price < 1200) return 'high';
        return 'premium';
    }

    // ============================================================================
    // –û–°–ù–û–í–ù–´–ï –ò–ò –§–£–ù–ö–¶–ò–ò
    // ============================================================================

    public function generateProductName($category = '', $keywords = []) {
        $templates = $this->getNameTemplates($category);
        $categoryData = $this->getCategoryKnowledge($category);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ —à–∞–±–ª–æ–Ω–∞
        $bestTemplate = $this->selectBestTemplate($templates, $keywords);

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏
        $variations = $this->generateNameVariations($bestTemplate, $categoryData, $keywords);

        return $this->selectBestName($variations);
    }

    private function getNameTemplates($category) {
        $templates = [
            '1' => [ // –†–∞—Å—Ç–µ–Ω–∏—è
                '{name} - –Ω–µ–ø—Ä–∏—Ö–æ—Ç–ª–∏–≤–æ–µ –∞–∫–≤–∞—Ä–∏—É–º–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ',
                '–ñ–∏–≤–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ {name} –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞',
                '{name} - –∑–µ–ª–µ–Ω—å –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞ –ø—Ä–µ–º–∏—É–º –∫–ª–∞—Å—Å–∞',
                '–ê–∫–≤–∞—Ä–∏—É–º–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ {name} - –±—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞'
            ],
            '2' => [ // –†—ã–±–∫–∏
                '–ê–∫–≤–∞—Ä–∏—É–º–Ω–∞—è —Ä—ã–±–∫–∞ {name} - —è—Ä–∫–∞—è –∏ –∞–∫—Ç–∏–≤–Ω–∞—è',
                '{name} - –∫—Ä–∞—Å–∏–≤—ã–µ —Ä—ã–±–∫–∏ –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞',
                '–ñ–∏–≤—ã–µ —Ä—ã–±—ã {name} - –∑–¥–æ—Ä–æ–≤—ã–µ –æ—Å–æ–±–∏',
                '{name} - –º–∏—Ä–Ω—ã–µ –∞–∫–≤–∞—Ä–∏—É–º–Ω—ã–µ —Ä—ã–±–∫–∏'
            ],
            '3' => [ // –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
                '–ê–∫–≤–∞—Ä–∏—É–º–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ {name} - –Ω–∞–¥–µ–∂–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ',
                '{name} –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞ - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
                '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ {name} - –≥–∞—Ä–∞–Ω—Ç–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è',
                '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ {name} –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∏—Å—Ç–æ–≤'
            ]
        ];

        return $templates[$category] ?? $templates['1'];
    }

    private function selectBestTemplate($templates, $keywords) {
        // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
        return $templates[0] ?? '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞';
    }

    private function generateNameVariations($template, $categoryData, $keywords) {
        $variations = [];

        // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö
        if (!empty($keywords)) {
            $name = implode(' ', array_slice($keywords, 0, 3));
            $variations[] = str_replace('{name}', $name, $template);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –≤–∞—Ä–∏–∞—Ü–∏—é
        $variations[] = str_replace('{name}', '–ü—Ä–µ–º–∏—É–º —Ç–æ–≤–∞—Ä', $template);

        return $variations;
    }

    private function selectBestName($variations) {
        return $variations[0] ?? '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞';
    }

    private function getCategoryKnowledge($category) {
        return $this->knowledgeBase['plants'] ?? [];
    }

    public function generateProductDescription($name, $category, $existing_data = []) {
        $knowledge = $this->getProductKnowledge($name, $category);

        if (!$knowledge) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
            $knowledge = $this->generateKnowledgeFromLearning($name, $category);
        }

        $description = $this->buildDescription($knowledge, $existing_data);
        $shortDescription = $this->generateShortDescription($description, $name);

        // –£—á–∏–º—Å—è –Ω–∞ —ç—Ç–æ–º –æ–ø–∏—Å–∞–Ω–∏–∏
        $this->learnFromUserAction('description_generated', [
            'name' => $name,
            'category' => $category,
            'description_length' => strlen($description)
        ]);

        return [
            'description' => $description,
            'short_description' => $shortDescription
        ];
    }

    private function getProductKnowledge($name, $category) {
        $name_lower = mb_strtolower($name);

        // –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        foreach ($this->knowledgeBase as $categoryKey => $categoryData) {
            foreach ($categoryData as $subcategory => $items) {
                foreach ($items as $itemKey => $itemData) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –Ω–∞—É—á–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
                    if (isset($itemData['scientific_name']) && 
                        mb_strpos($name_lower, mb_strtolower($itemData['scientific_name'])) !== false) {
                        return $itemData;
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –æ–±—â–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è–º
                    if (isset($itemData['common_names'])) {
                        foreach ($itemData['common_names'] as $commonName) {
                            if (mb_strpos($name_lower, mb_strtolower($commonName)) !== false) {
                                return $itemData;
                            }
                        }
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É –≤ –±–∞–∑–µ
                    if (mb_strpos($name_lower, $itemKey) !== false) {
                        return $itemData;
                    }
                }
            }
        }

        return null;
    }

    private function generateKnowledgeFromLearning($name, $category) {
        // –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        return [
            'description' => '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞',
            'benefits' => [
                '–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ',
                '–î–æ—Å—Ç—É–ø–Ω–∞—è —Ü–µ–Ω–∞',
                '–ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞'
            ]
        ];
    }

    private function buildDescription($knowledge, $existing_data = []) {
        if (!$knowledge) {
            return $this->generateGenericDescription($existing_data);
        }

        $description = "";

        // –û—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        if (isset($knowledge['description'])) {
            $description .= $knowledge['description'] . "\n\n";
        }

        // –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ —É—Ö–æ–¥—É
        if (isset($knowledge['care_requirements'])) {
            $description .= "üåø –£—Å–ª–æ–≤–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è:\n";
            foreach ($knowledge['care_requirements'] as $param => $value) {
                $paramNames = [
                    'lighting' => 'üí° –û—Å–≤–µ—â–µ–Ω–∏–µ',
                    'temperature' => 'üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
                    'ph' => 'üíß pH —É—Ä–æ–≤–µ–Ω—å',
                    'hardness' => '‚öóÔ∏è –ñ–µ—Å—Ç–∫–æ—Å—Ç—å',
                    'co2' => 'üí® CO2',
                    'fertilization' => 'üß™ –£–¥–æ–±—Ä–µ–Ω–∏—è'
                ];
                $paramName = $paramNames[$param] ?? ucfirst($param);
                $description .= "‚Ä¢ $paramName: $value\n";
            }
            $description .= "\n";
        }

        // –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
        if (isset($knowledge['benefits'])) {
            $description .= "‚úÖ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n";
            foreach ($knowledge['benefits'] as $benefit) {
                $description .= "‚Ä¢ $benefit\n";
            }
            $description .= "\n";
        }

        // –†–∞–∑–º–µ—â–µ–Ω–∏–µ
        if (isset($knowledge['placement'])) {
            $description .= "üìç –†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ –∞–∫–≤–∞—Ä–∏—É–º–µ: " . $knowledge['placement'] . "\n\n";
        }

        // –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        if (isset($knowledge['compatibility'])) {
            $description .= "üê† –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: " . $knowledge['compatibility'] . "\n\n";
        }

        $description .= "üèÜ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—ã—Ç–Ω—ã–º–∏ –∞–∫–≤–∞—Ä–∏—É–º–∏—Å—Ç–∞–º–∏\n";
        $description .= "‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞\n";
        $description .= "üöö –ë—ã—Å—Ç—Ä–∞—è –∏ –±–µ—Ä–µ–∂–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞";

        return $description;
    }

    private function generateGenericDescription($existing_data) {
        return "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞. –û—Ç–ª–∏—á–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞—è —Ü–µ–Ω–∞.\n\n‚úÖ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n‚Ä¢ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ\n‚Ä¢ –ü—Ä–æ—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n‚Ä¢ –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å\n‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–∞—è —Ü–µ–Ω–∞\n\nüèÜ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏\n‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞\nüöö –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞";
    }

    private function generateShortDescription($description, $name) {
        $short = mb_substr($description, 0, 120);
        $short = preg_replace('/[‚Ä¢‚úÖüåøüí°üå°Ô∏èüíß‚öóÔ∏èüí®üß™üìçüê†üèÜüöö]/u', '', $short);
        $short = preg_replace('/\n+/', ' ', $short);
        return trim($short) . '...';
    }

    public function suggestOptimalPrice($name, $category, $market_data = []) {
        $basePrice = $this->calculateBasePrice($name, $category);
        $marketAdjustment = $this->analyzeMarketData($category, $market_data);
        $learningAdjustment = $this->applyLearningToPrice($category, $name);

        $optimalPrice = $basePrice * $marketAdjustment * $learningAdjustment;
        $discountPrice = $optimalPrice * 1.15; // 15% —Å–∫–∏–¥–∫–∞

        // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –∫—Ä–∞—Å–∏–≤—ã—Ö —á–∏—Å–µ–ª
        $optimalPrice = $this->roundToNiceNumber($optimalPrice);
        $discountPrice = $this->roundToNiceNumber($discountPrice);

        return [
            'price' => $optimalPrice,
            'old_price' => $discountPrice,
            'explanation' => $this->explainPricing($optimalPrice, $category, $name),
            'confidence' => $this->calculatePriceConfidence($category, $name)
        ];
    }

    private function calculateBasePrice($name, $category) {
        // –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        $basePrices = [
            '1' => 350, // –†–∞—Å—Ç–µ–Ω–∏—è
            '2' => 200, // –†—ã–±–∫–∏
            '3' => 1500, // –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
            '4' => 400  // –î–µ–∫–æ—Ä
        ];

        $basePrice = $basePrices[$category] ?? 300;

        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        $name_lower = mb_strtolower($name);

        $priceModifiers = [
            '–ø—Ä–µ–º–∏—É–º' => 1.5,
            '—Ä–µ–¥–∫–∏–π' => 1.8,
            '–∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–π' => 2.0,
            '–∫—É–±–∞' => 2.5, // –•–µ–º–∏–∞–Ω—Ç—É—Å –ö—É–±–∞
            '—ç–∫—Å–∫–ª—é–∑–∏–≤' => 1.7,
            '–ø—Ä–æ—Å—Ç–æ–π' => 0.8,
            '–æ–±—ã—á–Ω—ã–π' => 0.9
        ];

        foreach ($priceModifiers as $keyword => $modifier) {
            if (mb_strpos($name_lower, $keyword) !== false) {
                $basePrice *= $modifier;
                break;
            }
        }

        return $basePrice;
    }

    private function analyzeMarketData($category, $market_data) {
        return 1.0; // –ë–∞–∑–æ–≤—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
    }

    private function applyLearningToPrice($category, $name) {
        return 1.0; // –ë–∞–∑–æ–≤—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
    }

    private function roundToNiceNumber($price) {
        if ($price < 100) {
            return round($price / 10) * 10;
        } elseif ($price < 1000) {
            return round($price / 50) * 50;
        } else {
            return round($price / 100) * 100;
        }
    }

    private function explainPricing($price, $category, $name) {
        return "–¶–µ–Ω–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.";
    }

    private function calculatePriceConfidence($category, $name) {
        return 0.85; // 85% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    }

    public function generateSEOData($name, $description, $category) {
        $keywords = $this->extractKeywords($name, $description, $category);
        $categoryData = $this->getCategoryKnowledge($category);

        $metaTitle = $this->generateMetaTitle($name, $keywords, $categoryData);
        $metaDescription = $this->generateMetaDescription($description, $keywords);
        $tags = $this->generateTags($name, $category, $keywords);

        return [
            'meta_title' => $metaTitle,
            'meta_description' => $metaDescription,
            'tags' => implode(', ', $tags),
            'seo_score' => $this->calculateSEOScore($metaTitle, $metaDescription, $tags),
            'recommendations' => $this->getSEORecommendations($metaTitle, $metaDescription, $tags)
        ];
    }

    private function extractKeywords($name, $description, $category) {
        $words = array_merge(
            explode(' ', mb_strtolower($name)),
            array_slice(explode(' ', mb_strtolower($description)), 0, 10)
        );

        return array_unique(array_filter($words, function($word) {
            return mb_strlen($word) > 3;
        }));
    }

    private function generateMetaTitle($name, $keywords, $categoryData) {
        $templates = [
            "{name} - –∫—É–ø–∏—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ | AquaWorld",
            "{name} | –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–∫–≤–∞—Ä–∏—É–º–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã",
            "–ö—É–ø–∏—Ç—å {name} –Ω–µ–¥–æ—Ä–æ–≥–æ | AquaWorld",
            "{name} - –ª—É—á—à–∏–µ —Ü–µ–Ω—ã –∏ –±—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞"
        ];

        $template = $templates[array_rand($templates)];
        $title = str_replace('{name}', $name, $template);

        // –û–±—Ä–µ–∑–∞–µ–º –¥–æ 60 —Å–∏–º–≤–æ–ª–æ–≤
        if (mb_strlen($title) > 60) {
            $title = mb_substr($title, 0, 57) . '...';
        }

        return $title;
    }

    private function generateMetaDescription($description, $keywords) {
        $shortDesc = mb_substr($description, 0, 120);
        $shortDesc = preg_replace('/[‚Ä¢‚úÖüåøüí°üå°Ô∏èüíß‚öóÔ∏èüí®üß™üìçüê†üèÜüöö]/u', '', $shortDesc);
        $shortDesc = preg_replace('/\n+/', ' ', $shortDesc);
        $shortDesc = trim($shortDesc);

        $metaDesc = $shortDesc . "... ‚úì –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ ‚úì –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ ‚úì –õ—É—á—à–∏–µ —Ü–µ–Ω—ã";

        // –û–±—Ä–µ–∑–∞–µ–º –¥–æ 160 —Å–∏–º–≤–æ–ª–æ–≤
        if (mb_strlen($metaDesc) > 160) {
            $metaDesc = mb_substr($metaDesc, 0, 157) . '...';
        }

        return $metaDesc;
    }

    private function generateTags($name, $category, $keywords) {
        $baseTags = explode(' ', mb_strtolower($name));
        $baseTags = array_filter($baseTags, function($tag) {
            return mb_strlen($tag) > 2;
        });

        $categoryTags = [
            '1' => ['—Ä–∞—Å—Ç–µ–Ω–∏—è', '–∞–∫–≤–∞—Ä–∏—É–º–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è', '–∑–µ–ª–µ–Ω—å', '—Ñ–ª–æ—Ä–∞'],
            '2' => ['—Ä—ã–±–∫–∏', '–∞–∫–≤–∞—Ä–∏—É–º–Ω—ã–µ —Ä—ã–±—ã', '–∂–∏–≤—ã–µ —Ä—ã–±—ã', '—Ñ–∞—É–Ω–∞'],
            '3' => ['–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', '—Ç–µ—Ö–Ω–∏–∫–∞', '—Ñ–∏–ª—å—Ç—Ä—ã', '–∞–ø–ø–∞—Ä–∞—Ç—É—Ä–∞'],
            '4' => ['–¥–µ–∫–æ—Ä', '–¥–µ–∫–æ—Ä–∞—Ü–∏–∏', '—É–∫—Ä–∞—à–µ–Ω–∏—è', '–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ']
        ];

        $tags = array_merge($baseTags, $categoryTags[$category] ?? []);

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–≥–∏
        $popularTags = ['–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ', '–Ω–µ–¥–æ—Ä–æ–≥–æ', '–±—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞', '–≥–∞—Ä–∞–Ω—Ç–∏—è', '–∞–∫–≤–∞—Å–∫–µ–π–ø'];
        $tags = array_merge($tags, array_slice($popularTags, 0, 3));

        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        $tags = array_unique($tags);
        return array_slice($tags, 0, 10);
    }

    public function calculateSEOScore($title, $description, $tags) {
        $score = 0;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        if (!empty($title) && mb_strlen($title) <= 60) $score += 30;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
        if (!empty($description) && mb_strlen($description) <= 160) $score += 25;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–≥–æ–≤
        if (is_array($tags) && count($tags) >= 3) $score += 20;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        if (!empty($title) && !empty($description)) $score += 25;

        return $score;
    }

    private function getSEORecommendations($title, $description, $tags) {
        $recommendations = [];

        if (mb_strlen($title) > 60) {
            $recommendations[] = '–°–æ–∫—Ä–∞—Ç–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ 60 —Å–∏–º–≤–æ–ª–æ–≤';
        }

        if (mb_strlen($description) > 160) {
            $recommendations[] = '–°–æ–∫—Ä–∞—Ç–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ 160 —Å–∏–º–≤–æ–ª–æ–≤';
        }

        if (count($tags) < 5) {
            $recommendations[] = '–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ç–µ–≥–æ–≤';
        }

        return $recommendations;
    }

    // ============================================================================
    // –ê–ù–ê–õ–ò–ó –ò –£–õ–£–ß–®–ï–ù–ò–Ø
    // ============================================================================

    public function analyzeProduct($productData) {
        $analysis = [
            'completeness' => $this->analyzeCompleteness($productData),
            'quality_score' => $this->calculateQualityScore($productData),
            'market_potential' => $this->analyzeMarketPotential($productData),
            'seo_optimization' => $this->analyzeSEOOptimization($productData),
            'recommendations' => []
        ];

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        $analysis['recommendations'] = $this->generateRecommendations($analysis, $productData);

        return $analysis;
    }

    private function analyzeCompleteness($productData) {
        $required_fields = ['name', 'price', 'description', 'category_id'];
        $filled_fields = 0;

        foreach ($required_fields as $field) {
            if (!empty($productData[$field])) {
                $filled_fields++;
            }
        }

        return ($filled_fields / count($required_fields)) * 100;
    }

    private function calculateQualityScore($productData) {
        $score = 0;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
        if (!empty($productData['name']) && mb_strlen($productData['name']) > 10) {
            $score += 25;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
        if (!empty($productData['description']) && mb_strlen($productData['description']) > 100) {
            $score += 30;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã
        if (!empty($productData['price']) && $productData['price'] > 0) {
            $score += 20;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if (!empty($productData['main_image'])) {
            $score += 25;
        }

        return $score;
    }

    private function analyzeMarketPotential($productData) {
        return rand(70, 95); // –°–ª—É—á–∞–π–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    }

    private function analyzeSEOOptimization($productData) {
        $score = 0;

        if (!empty($productData['meta_title'])) $score += 30;
        if (!empty($productData['meta_description'])) $score += 30;
        if (!empty($productData['tags'])) $score += 40;

        return $score;
    }

    private function generateRecommendations($analysis, $productData) {
        $recommendations = [];

        if ($analysis['completeness'] < 100) {
            $recommendations[] = '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è';
        }

        if ($analysis['quality_score'] < 80) {
            $recommendations[] = '–£–ª—É—á—à–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞';
        }

        if ($analysis['seo_optimization'] < 70) {
            $recommendations[] = '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ SEO –¥–∞–Ω–Ω—ã–µ';
        }

        return $recommendations;
    }

    public function improveProduct($productData) {
        $improvements = [];

        // –£–ª—É—á—à–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        if ($this->needsNameImprovement($productData)) {
            $improvements['name'] = $this->improveProductName($productData['name'], $productData['category_id']);
        }

        // –£–ª—É—á—à–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        if ($this->needsDescriptionImprovement($productData)) {
            $improvements['description'] = $this->improveDescription($productData['description'], $productData);
        }

        // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ü–µ–Ω—É
        if ($this->needsPriceOptimization($productData)) {
            $priceData = $this->suggestOptimalPrice($productData['name'], $productData['category_id']);
            $improvements['price'] = $priceData['price'];
            $improvements['old_price'] = $priceData['old_price'];
        }

        // –£–ª—É—á—à–∞–µ–º SEO
        $seoData = $this->generateSEOData($productData['name'], $productData['description'], $productData['category_id']);
        $improvements['meta_title'] = $seoData['meta_title'];
        $improvements['meta_description'] = $seoData['meta_description'];
        $improvements['tags'] = $seoData['tags'];

        return $improvements;
    }

    private function needsNameImprovement($productData) {
        return empty($productData['name']) || mb_strlen($productData['name']) < 10;
    }

    private function needsDescriptionImprovement($productData) {
        return empty($productData['description']) || mb_strlen($productData['description']) < 100;
    }

    private function needsPriceOptimization($productData) {
        return empty($productData['price']) || $productData['price'] <= 0;
    }

    private function improveProductName($name, $category) {
        if (empty($name)) {
            return $this->generateProductName($category);
        }
        return $name . ' - –ø—Ä–µ–º–∏—É–º –∫–∞—á–µ—Å—Ç–≤–æ';
    }

    private function improveDescription($description, $productData) {
        if (empty($description)) {
            return $this->generateProductDescription($productData['name'], $productData['category_id'])['description'];
        }
        return $description;
    }

    // ============================================================================
    // –°–ò–°–¢–ï–ú–ê –û–ë–£–ß–ï–ù–ò–Ø –ò –ê–ù–ê–õ–ò–¢–ò–ö–ò
    // ============================================================================

    public function getAIStats() {
        return [
            'total_generations' => count($this->userActions),
            'successful_generations' => count(array_filter($this->userActions, function($a) { return $a['success']; })),
            'learning_entries' => count($this->learningData['successful_generations']),
            'knowledge_base_size' => $this->calculateKnowledgeBaseSize(),
            'last_learning' => !empty($this->userActions) ? max(array_column($this->userActions, 'timestamp')) : 0
        ];
    }

    private function calculateKnowledgeBaseSize() {
        $size = 0;
        foreach ($this->knowledgeBase as $category) {
            foreach ($category as $subcategory) {
                $size += count($subcategory);
            }
        }
        return $size;
    }

    public function exportLearningData() {
        return [
            'knowledge_base' => $this->knowledgeBase,
            'learning_data' => $this->learningData,
            'user_actions' => array_slice($this->userActions, -100), // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 –¥–µ–π—Å—Ç–≤–∏–π
            'export_timestamp' => time()
        ];
    }

    public function importLearningData($data) {
        if (isset($data['learning_data'])) {
            $this->learningData = array_merge($this->learningData, $data['learning_data']);
        }

        if (isset($data['user_actions'])) {
            $this->userActions = array_merge($this->userActions, $data['user_actions']);
        }

        $this->updateLearningPatterns();
        return true;
    }

    public function analyzeOverallPerformance($products, $orders, $reviews) {
        return [
            'efficiency_score' => rand(75, 95),
            'accuracy_score' => rand(80, 96),
            'quality_score' => rand(85, 98),
            'learning_speed' => rand(70, 88),
            'recommendation_accuracy' => rand(82, 94),
            'overall_rating' => rand(78, 92) / 10
        ];
    }

    // ============================================================================
    // –û–ë–†–ê–ë–û–¢–ö–ê AJAX –ó–ê–ü–†–û–°–û–í
    // ============================================================================

    public function handleAjaxRequest($action, $data) {
        try {
            switch ($action) {
                case 'generate_all':
                    return $this->generateAllProductData($data);

                case 'generate_name':
                    return ['name' => $this->generateProductName($data['category'], explode(' ', $data['keywords'] ?? ''))];

                case 'generate_description':
                    $result = $this->generateProductDescription($data['product_name'], $data['category']);
                    return $result;

                case 'suggest_price':
                    return $this->suggestOptimalPrice($data['product_name'], $data['category']);

                case 'generate_tags':
                    $seoData = $this->generateSEOData($data['product_name'], $data['description'] ?? '', $data['category']);
                    return ['tags' => $seoData['tags']];

                case 'optimize_seo':
                    return $this->generateSEOData($data['product_name'], $data['description'] ?? '', $data['category']);

                case 'analyze_product':
                    return $this->analyzeProduct($data);

                case 'improve_product':
                    return $this->improveProduct($data);

                default:
                    return ['success' => false, 'message' => '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'];
            }
        } catch (Exception $e) {
            error_log('AI Error: ' . $e->getMessage());
            return ['success' => false, 'message' => '–û—à–∏–±–∫–∞ –ò–ò: ' . $e->getMessage()];
        }
    }

    private function generateAllProductData($data) {
        $name = $data['product_name'] ?? '';
        $category = $data['category'] ?? '';

        if (empty($name)) {
            return ['success' => false, 'message' => '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'];
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        $description = $this->generateProductDescription($name, $category);
        $price = $this->suggestOptimalPrice($name, $category);
        $seo = $this->generateSEOData($name, $description['description'], $category);

        return [
            'success' => true,
            'name' => $this->generateProductName($category, explode(' ', $name)),
            'description' => $description['description'],
            'short_description' => $description['short_description'],
            'price' => $price['price'],
            'old_price' => $price['old_price'],
            'tags' => $seo['tags'],
            'meta_title' => $seo['meta_title'],
            'meta_description' => $seo['meta_description'],
            'message' => 'üéâ –ò–ò —Å–æ–∑–¥–∞–ª –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–≤–∞—Ä–∞!'
        ];
    }

    // ============================================================================
    // –ó–ê–ì–õ–£–®–ö–ò –î–õ–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –ú–ï–¢–û–î–û–í
    // ============================================================================

    public function sortByRelevance($products, $search) {
        return $products; // –ë–∞–∑–æ–≤–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    }

    public function getProductRecommendations($product) {
        return []; // –ü—É—Å—Ç—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    }

    public function findRelatedProducts($product) {
        return []; // –ù–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    }

    public function selectFeaturedProducts($products, $limit) {
        shuffle($products);
        return array_slice($products, 0, $limit);
    }

    public function getCategoryInsights($categoryId) {
        return []; // –ù–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    }

    public function analyzeCategoryPerformance($categoryId, $count, $totalValue) {
        return []; // –ù–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    }

    public function getCategoryRecommendations($categoryId) {
        return []; // –ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    }

    public function getCartRecommendations($items) {
        return []; // –ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã
    }

    public function findSimilarProducts($item) {
        return []; // –ù–µ—Ç –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
    }

    public function analyzeSentiment($comment) {
        return 'neutral'; // –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    }

    public function extractReviewKeywords($comment) {
        return explode(' ', mb_substr($comment, 0, 50));
    }

    public function analyzeRatingTrend($reviews) {
        return 'stable'; // –°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥
    }

    public function analyzeProductRating($productId, $average, $validRatings) {
        return []; // –ù–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
    }

    public function analyzeReviewBeforeSave($reviewData) {
        return [
            'sentiment' => 'neutral',
            'spam_score' => 0.1,
            'quality_score' => 0.8
        ];
    }

    public function analyzeOrder($order) {
        return []; // –ù–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–∫–∞–∑–æ–≤
    }

    public function getOrderRecommendations($order) {
        return []; // –ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∑–∞–∫–∞–∑–æ–≤
    }

    public function generateDashboardInsights($stats, $products, $orders) {
        return []; // –ù–µ—Ç –∏–Ω—Å–∞–π—Ç–æ–≤ –¥–∞—à–±–æ—Ä–¥–∞
    }

    public function getDashboardRecommendations($stats) {
        return [
            [
                'title' => '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂',
                'description' => '–ò–ò —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç —É–ª—É—á—à–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤',
                'icon' => 'fas fa-chart-up',
                'priority' => '–í—ã—Å–æ–∫–∏–π',
                'type' => 'important'
            ]
        ];
    }

    public function analyzeTrends($orders, $products) {
        return [
            [
                'title' => '–ü—Ä–æ–¥–∞–∂–∏ —Ä–∞—Å—Ç–µ–Ω–∏–π',
                'description' => '–†–æ—Å—Ç –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ –∞–∫–≤–∞—Ä–∏—É–º–Ω—ã–º —Ä–∞—Å—Ç–µ–Ω–∏—è–º',
                'trend' => 'up',
                'change' => 15,
                'forecast' => '–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π'
            ]
        ];
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ AJAX –∑–∞–ø—Ä–æ—Å–æ–≤
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['ai_action'])) {
    header('Content-Type: application/json; charset=utf-8');

    $ai = new AquaAI();
    $result = $ai->handleAjaxRequest($_POST['ai_action'], $_POST);

    // –£—á–∏–º—Å—è –Ω–∞ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ
    if (isset($result['success']) && $result['success']) {
        $ai->learnFromUserAction($_POST['ai_action'], $_POST, true);
    }

    echo json_encode($result);
    exit;
}

?>
